{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, ViewEncapsulation, Input, Output, ViewChild, ContentChildren, Directive, HostListener, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { DomHandler } from 'primeng/dom';\nimport * as i2 from 'primeng/paginator';\nimport { PaginatorModule } from 'primeng/paginator';\nimport * as i1 from 'primeng/api';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { ObjectUtils } from 'primeng/utils';\nimport * as i5 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\nimport * as i4 from '@angular/cdk/scrolling';\nimport { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\nconst _c0 = [\"container\"];\nconst _c1 = [\"resizeHelper\"];\nconst _c2 = [\"reorderIndicatorUp\"];\nconst _c3 = [\"reorderIndicatorDown\"];\nconst _c4 = [\"table\"];\nconst _c5 = [\"scrollableView\"];\nconst _c6 = [\"scrollableFrozenView\"];\n\nfunction TreeTable_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵelementStart(1, \"div\", 13);\n    i0.ɵɵelement(2, \"i\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵclassMap(\"p-treetable-loading-icon pi-spin \" + ctx_r1.loadingIcon);\n  }\n}\n\nfunction TreeTable_div_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TreeTable_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtemplate(1, TreeTable_div_3_ng_container_1_Template, 1, 0, \"ng-container\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.captionTemplate);\n  }\n}\n\nfunction TreeTable_p_paginator_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"p-paginator\", 16);\n    i0.ɵɵlistener(\"onPageChange\", function TreeTable_p_paginator_4_Template_p_paginator_onPageChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.onPageChange($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"rows\", ctx_r3.rows)(\"first\", ctx_r3.first)(\"totalRecords\", ctx_r3.totalRecords)(\"pageLinkSize\", ctx_r3.pageLinks)(\"alwaysShow\", ctx_r3.alwaysShowPaginator)(\"rowsPerPageOptions\", ctx_r3.rowsPerPageOptions)(\"templateLeft\", ctx_r3.paginatorLeftTemplate)(\"templateRight\", ctx_r3.paginatorRightTemplate)(\"dropdownAppendTo\", ctx_r3.paginatorDropdownAppendTo)(\"currentPageReportTemplate\", ctx_r3.currentPageReportTemplate)(\"showFirstLastIcon\", ctx_r3.showFirstLastIcon)(\"dropdownItemTemplate\", ctx_r3.paginatorDropdownItemTemplate)(\"showCurrentPageReport\", ctx_r3.showCurrentPageReport)(\"showJumpToPageDropdown\", ctx_r3.showJumpToPageDropdown)(\"showPageLinks\", ctx_r3.showPageLinks);\n  }\n}\n\nfunction TreeTable_div_5_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TreeTable_div_5_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TreeTable_div_5_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c7 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction TreeTable_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵelementStart(1, \"table\", 18, 19);\n    i0.ɵɵtemplate(3, TreeTable_div_5_ng_container_3_Template, 1, 0, \"ng-container\", 20);\n    i0.ɵɵelementStart(4, \"thead\", 21);\n    i0.ɵɵtemplate(5, TreeTable_div_5_ng_container_5_Template, 1, 0, \"ng-container\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"tbody\", 22);\n    i0.ɵɵelementStart(7, \"tfoot\", 23);\n    i0.ɵɵtemplate(8, TreeTable_div_5_ng_container_8_Template, 1, 0, \"ng-container\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r4.tableStyleClass)(\"ngStyle\", ctx_r4.tableStyle);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(10, _c7, ctx_r4.columns));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.headerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(12, _c7, ctx_r4.columns));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"pTreeTableBody\", ctx_r4.columns)(\"pTreeTableBodyTemplate\", ctx_r4.bodyTemplate);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.footerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(14, _c7, ctx_r4.columns));\n  }\n}\n\nconst _c8 = function (a0) {\n  return {\n    width: a0\n  };\n};\n\nfunction TreeTable_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 28, 29);\n  }\n\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ttScrollableView\", ctx_r18.frozenColumns)(\"frozen\", true)(\"ngStyle\", i0.ɵɵpureFunction1(4, _c8, ctx_r18.frozenWidth))(\"scrollHeight\", ctx_r18.scrollHeight);\n  }\n}\n\nconst _c9 = function (a0, a1) {\n  return {\n    left: a0,\n    width: a1\n  };\n};\n\nfunction TreeTable_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24);\n    i0.ɵɵtemplate(1, TreeTable_div_6_div_1_Template, 2, 6, \"div\", 25);\n    i0.ɵɵelement(2, \"div\", 26, 27);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.frozenColumns || ctx_r5.frozenBodyTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ttScrollableView\", ctx_r5.columns)(\"frozen\", false)(\"scrollHeight\", ctx_r5.scrollHeight)(\"ngStyle\", i0.ɵɵpureFunction2(5, _c9, ctx_r5.frozenWidth, \"calc(100% - \" + ctx_r5.frozenWidth + \")\"));\n  }\n}\n\nfunction TreeTable_p_paginator_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"p-paginator\", 30);\n    i0.ɵɵlistener(\"onPageChange\", function TreeTable_p_paginator_7_Template_p_paginator_onPageChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.onPageChange($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"rows\", ctx_r6.rows)(\"first\", ctx_r6.first)(\"totalRecords\", ctx_r6.totalRecords)(\"pageLinkSize\", ctx_r6.pageLinks)(\"alwaysShow\", ctx_r6.alwaysShowPaginator)(\"rowsPerPageOptions\", ctx_r6.rowsPerPageOptions)(\"templateLeft\", ctx_r6.paginatorLeftTemplate)(\"templateRight\", ctx_r6.paginatorRightTemplate)(\"dropdownAppendTo\", ctx_r6.paginatorDropdownAppendTo)(\"currentPageReportTemplate\", ctx_r6.currentPageReportTemplate)(\"showFirstLastIcon\", ctx_r6.showFirstLastIcon)(\"dropdownItemTemplate\", ctx_r6.paginatorDropdownItemTemplate)(\"showCurrentPageReport\", ctx_r6.showCurrentPageReport)(\"showJumpToPageDropdown\", ctx_r6.showJumpToPageDropdown)(\"showPageLinks\", ctx_r6.showPageLinks);\n  }\n}\n\nfunction TreeTable_div_8_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TreeTable_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31);\n    i0.ɵɵtemplate(1, TreeTable_div_8_ng_container_1_Template, 1, 0, \"ng-container\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r7.summaryTemplate);\n  }\n}\n\nfunction TreeTable_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 32, 33);\n  }\n}\n\nfunction TreeTable_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 34, 35);\n  }\n}\n\nfunction TreeTable_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 36, 37);\n  }\n}\n\nconst _c10 = function (a1, a2, a3, a4, a5) {\n  return {\n    \"p-treetable p-component\": true,\n    \"p-treetable-hoverable-rows\": a1,\n    \"p-treetable-auto-layout\": a2,\n    \"p-treetable-resizable\": a3,\n    \"p-treetable-resizable-fit\": a4,\n    \"p-treetable-flex-scrollable\": a5\n  };\n};\n\nconst _c11 = [\"pTreeTableBody\", \"\"];\n\nfunction TTBody_ng_container_0_ng_template_1_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c12 = function (a0, a1, a2, a3) {\n  return {\n    $implicit: a0,\n    node: a1,\n    rowData: a2,\n    columns: a3\n  };\n};\n\nfunction TTBody_ng_container_0_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTBody_ng_container_0_ng_template_1_ng_container_0_ng_container_1_Template, 1, 0, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const serializedNode_r4 = i0.ɵɵnextContext().$implicit;\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r6.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction4(2, _c12, serializedNode_r4, serializedNode_r4.node, serializedNode_r4.node.data, ctx_r6.columns));\n  }\n}\n\nfunction TTBody_ng_container_0_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TTBody_ng_container_0_ng_template_1_ng_container_0_Template, 2, 7, \"ng-container\", 0);\n  }\n\n  if (rf & 2) {\n    const serializedNode_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngIf\", serializedNode_r4.visible);\n  }\n}\n\nfunction TTBody_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTBody_ng_container_0_ng_template_1_Template, 1, 1, \"ng-template\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.tt.serializedValue)(\"ngForTrackBy\", ctx_r0.tt.rowTrackBy);\n  }\n}\n\nfunction TTBody_ng_container_1_ng_template_1_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TTBody_ng_container_1_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTBody_ng_container_1_ng_template_1_ng_container_0_ng_container_1_Template, 1, 0, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const serializedNode_r10 = i0.ɵɵnextContext().$implicit;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r12.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction4(2, _c12, serializedNode_r10, serializedNode_r10.node, serializedNode_r10.node.data, ctx_r12.columns));\n  }\n}\n\nfunction TTBody_ng_container_1_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TTBody_ng_container_1_ng_template_1_ng_container_0_Template, 2, 7, \"ng-container\", 0);\n  }\n\n  if (rf & 2) {\n    const serializedNode_r10 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngIf\", serializedNode_r10.visible);\n  }\n}\n\nfunction TTBody_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTBody_ng_container_1_ng_template_1_Template, 1, 1, \"ng-template\", 3);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"cdkVirtualForOf\", ctx_r1.tt.serializedValue)(\"cdkVirtualForTrackBy\", ctx_r1.tt.rowTrackBy)(\"cdkVirtualForTemplateCacheSize\", 0);\n  }\n}\n\nfunction TTBody_ng_container_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c13 = function (a0, a1) {\n  return {\n    $implicit: a0,\n    frozen: a1\n  };\n};\n\nfunction TTBody_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TTBody_ng_container_2_ng_container_1_Template, 1, 0, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.tt.emptyMessageTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c13, ctx_r2.columns, ctx_r2.frozen));\n  }\n}\n\nconst _c14 = [\"scrollHeader\"];\nconst _c15 = [\"scrollHeaderBox\"];\nconst _c16 = [\"scrollBody\"];\nconst _c17 = [\"scrollTable\"];\nconst _c18 = [\"loadingTable\"];\nconst _c19 = [\"scrollFooter\"];\nconst _c20 = [\"scrollFooterBox\"];\nconst _c21 = [\"scrollableAligner\"];\nconst _c22 = [\"ttScrollableView\", \"\"];\n\nfunction TTScrollableView_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TTScrollableView_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TTScrollableView_ng_container_8_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TTScrollableView_ng_container_8_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 16, 17);\n  }\n}\n\nconst _c23 = function (a0, a1) {\n  return {\n    \"max-height\": a0,\n    \"overflow-y\": a1\n  };\n};\n\nfunction TTScrollableView_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 10, 11);\n    i0.ɵɵelementStart(3, \"table\", 12, 13);\n    i0.ɵɵtemplate(5, TTScrollableView_ng_container_8_ng_container_5_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelement(6, \"tbody\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, TTScrollableView_ng_container_8_div_7_Template, 2, 0, \"div\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction2(10, _c23, ctx_r4.tt.scrollHeight !== \"flex\" ? ctx_r4.scrollHeight : undefined, !ctx_r4.frozen && ctx_r4.tt.scrollHeight ? \"scroll\" : undefined));\n    i0.ɵɵadvance(2);\n    i0.ɵɵclassMap(ctx_r4.tt.tableStyleClass);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r4.tt.tableStyle);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.frozen ? ctx_r4.tt.frozenColGroupTemplate || ctx_r4.tt.colGroupTemplate : ctx_r4.tt.colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(13, _c7, ctx_r4.columns));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"pTreeTableBody\", ctx_r4.columns)(\"pTreeTableBodyTemplate\", ctx_r4.frozen ? ctx_r4.tt.frozenBodyTemplate || ctx_r4.tt.bodyTemplate : ctx_r4.tt.bodyTemplate)(\"frozen\", ctx_r4.frozen);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.frozen);\n  }\n}\n\nfunction TTScrollableView_ng_template_9_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TTScrollableView_ng_template_9_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 16, 17);\n  }\n}\n\nfunction TTScrollableView_ng_template_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"cdk-virtual-scroll-viewport\", 18);\n    i0.ɵɵelementStart(1, \"table\", 12, 13);\n    i0.ɵɵtemplate(3, TTScrollableView_ng_template_9_ng_container_3_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelement(4, \"tbody\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, TTScrollableView_ng_template_9_div_5_Template, 2, 0, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"height\", ctx_r6.tt.scrollHeight !== \"flex\" ? ctx_r6.scrollHeight : undefined);\n    i0.ɵɵproperty(\"itemSize\", ctx_r6.tt.virtualRowHeight)(\"minBufferPx\", ctx_r6.tt.minBufferPx)(\"maxBufferPx\", ctx_r6.tt.maxBufferPx);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r6.tt.tableStyleClass);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r6.tt.tableStyle);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r6.frozen ? ctx_r6.tt.frozenColGroupTemplate || ctx_r6.tt.colGroupTemplate : ctx_r6.tt.colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(14, _c7, ctx_r6.columns));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"pTreeTableBody\", ctx_r6.columns)(\"pTreeTableBodyTemplate\", ctx_r6.frozen ? ctx_r6.tt.frozenBodyTemplate || ctx_r6.tt.bodyTemplate : ctx_r6.tt.bodyTemplate)(\"frozen\", ctx_r6.frozen);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.frozen);\n  }\n}\n\nfunction TTScrollableView_div_11_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TTScrollableView_div_11_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TTScrollableView_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19, 20);\n    i0.ɵɵelementStart(2, \"div\", 21, 22);\n    i0.ɵɵelementStart(4, \"table\", 23);\n    i0.ɵɵtemplate(5, TTScrollableView_div_11_ng_container_5_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelementStart(6, \"tfoot\", 24);\n    i0.ɵɵtemplate(7, TTScrollableView_div_11_ng_container_7_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngClass\", ctx_r7.tt.tableStyleClass)(\"ngStyle\", ctx_r7.tt.tableStyle);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r7.frozen ? ctx_r7.tt.frozenColGroupTemplate || ctx_r7.tt.colGroupTemplate : ctx_r7.tt.colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(6, _c7, ctx_r7.columns));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r7.frozen ? ctx_r7.tt.frozenFooterTemplate || ctx_r7.tt.footerTemplate : ctx_r7.tt.footerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(8, _c7, ctx_r7.columns));\n  }\n}\n\nconst _c24 = function (a0, a1, a2) {\n  return {\n    \"pi-sort-amount-up-alt\": a0,\n    \"pi-sort-amount-down\": a1,\n    \"pi-sort-alt\": a2\n  };\n};\n\nconst _c25 = function (a0) {\n  return {\n    \"p-checkbox-focused\": a0\n  };\n};\n\nconst _c26 = function (a1, a2, a3, a4) {\n  return {\n    \"p-checkbox-box\": true,\n    \"p-highlight\": a1,\n    \"p-focus\": a2,\n    \"p-indeterminate\": a3,\n    \"p-disabled\": a4\n  };\n};\n\nconst _c27 = function (a0, a1) {\n  return {\n    \"pi-check\": a0,\n    \"pi-minus\": a1\n  };\n};\n\nconst _c28 = [\"box\"];\n\nconst _c29 = function (a1, a2, a3) {\n  return {\n    \"p-checkbox-box\": true,\n    \"p-highlight\": a1,\n    \"p-focus\": a2,\n    \"p-disabled\": a3\n  };\n};\n\nconst _c30 = function (a0) {\n  return {\n    \"pi pi-check\": a0\n  };\n};\n\nfunction TreeTableCellEditor_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TreeTableCellEditor_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TreeTableCellEditor_ng_container_0_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.inputTemplate);\n  }\n}\n\nfunction TreeTableCellEditor_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction TreeTableCellEditor_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TreeTableCellEditor_ng_container_1_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.outputTemplate);\n  }\n}\n\nclass TreeTableService {\n  constructor() {\n    this.sortSource = new Subject();\n    this.selectionSource = new Subject();\n    this.contextMenuSource = new Subject();\n    this.uiUpdateSource = new Subject();\n    this.totalRecordsSource = new Subject();\n    this.sortSource$ = this.sortSource.asObservable();\n    this.selectionSource$ = this.selectionSource.asObservable();\n    this.contextMenuSource$ = this.contextMenuSource.asObservable();\n    this.uiUpdateSource$ = this.uiUpdateSource.asObservable();\n    this.totalRecordsSource$ = this.totalRecordsSource.asObservable();\n  }\n\n  onSort(sortMeta) {\n    this.sortSource.next(sortMeta);\n  }\n\n  onSelectionChange() {\n    this.selectionSource.next(null);\n  }\n\n  onContextMenu(node) {\n    this.contextMenuSource.next(node);\n  }\n\n  onUIUpdate(value) {\n    this.uiUpdateSource.next(value);\n  }\n\n  onTotalRecordsChange(value) {\n    this.totalRecordsSource.next(value);\n  }\n\n}\n\nTreeTableService.ɵfac = function TreeTableService_Factory(t) {\n  return new (t || TreeTableService)();\n};\n\nTreeTableService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TreeTableService,\n  factory: TreeTableService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTableService, [{\n    type: Injectable\n  }], null, null);\n})();\n\nclass TreeTable {\n  constructor(el, zone, tableService, filterService) {\n    this.el = el;\n    this.zone = zone;\n    this.tableService = tableService;\n    this.filterService = filterService;\n    this.lazy = false;\n    this.lazyLoadOnInit = true;\n    this.first = 0;\n    this.pageLinks = 5;\n    this.alwaysShowPaginator = true;\n    this.paginatorPosition = 'bottom';\n    this.currentPageReportTemplate = '{currentPage} of {totalPages}';\n    this.showFirstLastIcon = true;\n    this.showPageLinks = true;\n    this.defaultSortOrder = 1;\n    this.sortMode = 'single';\n    this.resetPageOnSort = true;\n    this.selectionChange = new EventEmitter();\n    this.contextMenuSelectionChange = new EventEmitter();\n    this.contextMenuSelectionMode = \"separate\";\n    this.compareSelectionBy = 'deepEquals';\n    this.loadingIcon = 'pi pi-spinner';\n    this.showLoader = true;\n    this.virtualScrollDelay = 150;\n    this.virtualRowHeight = 28;\n    this.columnResizeMode = 'fit';\n\n    this.rowTrackBy = (index, item) => item;\n\n    this.filters = {};\n    this.filterDelay = 300;\n    this.filterMode = 'lenient';\n    this.onFilter = new EventEmitter();\n    this.onNodeExpand = new EventEmitter();\n    this.onNodeCollapse = new EventEmitter();\n    this.onPage = new EventEmitter();\n    this.onSort = new EventEmitter();\n    this.onLazyLoad = new EventEmitter();\n    this.sortFunction = new EventEmitter();\n    this.onColResize = new EventEmitter();\n    this.onColReorder = new EventEmitter();\n    this.onNodeSelect = new EventEmitter();\n    this.onNodeUnselect = new EventEmitter();\n    this.onContextMenuSelect = new EventEmitter();\n    this.onHeaderCheckboxToggle = new EventEmitter();\n    this.onEditInit = new EventEmitter();\n    this.onEditComplete = new EventEmitter();\n    this.onEditCancel = new EventEmitter();\n    this._value = [];\n    this._totalRecords = 0;\n    this._sortOrder = 1;\n    this.selectionKeys = {};\n  }\n\n  ngOnInit() {\n    if (this.lazy && this.lazyLoadOnInit) {\n      this.onLazyLoad.emit(this.createLazyLoadMetadata());\n    }\n\n    this.initialized = true;\n  }\n\n  ngAfterContentInit() {\n    this.templates.forEach(item => {\n      switch (item.getType()) {\n        case 'caption':\n          this.captionTemplate = item.template;\n          break;\n\n        case 'header':\n          this.headerTemplate = item.template;\n          break;\n\n        case 'body':\n          this.bodyTemplate = item.template;\n          break;\n\n        case 'loadingbody':\n          this.loadingBodyTemplate = item.template;\n          break;\n\n        case 'footer':\n          this.footerTemplate = item.template;\n          break;\n\n        case 'summary':\n          this.summaryTemplate = item.template;\n          break;\n\n        case 'colgroup':\n          this.colGroupTemplate = item.template;\n          break;\n\n        case 'emptymessage':\n          this.emptyMessageTemplate = item.template;\n          break;\n\n        case 'paginatorleft':\n          this.paginatorLeftTemplate = item.template;\n          break;\n\n        case 'paginatorright':\n          this.paginatorRightTemplate = item.template;\n          break;\n\n        case 'paginatordropdownitem':\n          this.paginatorDropdownItemTemplate = item.template;\n          break;\n\n        case 'frozenheader':\n          this.frozenHeaderTemplate = item.template;\n          break;\n\n        case 'frozenbody':\n          this.frozenBodyTemplate = item.template;\n          break;\n\n        case 'frozenfooter':\n          this.frozenFooterTemplate = item.template;\n          break;\n\n        case 'frozencolgroup':\n          this.frozenColGroupTemplate = item.template;\n          break;\n      }\n    });\n  }\n\n  ngOnChanges(simpleChange) {\n    if (simpleChange.value) {\n      this._value = simpleChange.value.currentValue;\n\n      if (!this.lazy) {\n        this.totalRecords = this._value ? this._value.length : 0;\n        if (this.sortMode == 'single' && this.sortField) this.sortSingle();else if (this.sortMode == 'multiple' && this.multiSortMeta) this.sortMultiple();else if (this.hasFilter()) //sort already filters\n          this._filter();\n      }\n\n      this.updateSerializedValue();\n      this.tableService.onUIUpdate(this.value);\n    }\n\n    if (simpleChange.sortField) {\n      this._sortField = simpleChange.sortField.currentValue; //avoid triggering lazy load prior to lazy initialization at onInit\n\n      if (!this.lazy || this.initialized) {\n        if (this.sortMode === 'single') {\n          this.sortSingle();\n        }\n      }\n    }\n\n    if (simpleChange.sortOrder) {\n      this._sortOrder = simpleChange.sortOrder.currentValue; //avoid triggering lazy load prior to lazy initialization at onInit\n\n      if (!this.lazy || this.initialized) {\n        if (this.sortMode === 'single') {\n          this.sortSingle();\n        }\n      }\n    }\n\n    if (simpleChange.multiSortMeta) {\n      this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n\n      if (this.sortMode === 'multiple') {\n        this.sortMultiple();\n      }\n    }\n\n    if (simpleChange.selection) {\n      this._selection = simpleChange.selection.currentValue;\n\n      if (!this.preventSelectionSetterPropagation) {\n        this.updateSelectionKeys();\n        this.tableService.onSelectionChange();\n      }\n\n      this.preventSelectionSetterPropagation = false;\n    }\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(val) {\n    this._value = val;\n  }\n\n  updateSerializedValue() {\n    this.serializedValue = [];\n    if (this.paginator) this.serializePageNodes();else this.serializeNodes(null, this.filteredNodes || this.value, 0, true);\n  }\n\n  serializeNodes(parent, nodes, level, visible) {\n    if (nodes && nodes.length) {\n      for (let node of nodes) {\n        node.parent = parent;\n        const rowNode = {\n          node: node,\n          parent: parent,\n          level: level,\n          visible: visible && (parent ? parent.expanded : true)\n        };\n        this.serializedValue.push(rowNode);\n\n        if (rowNode.visible && node.expanded) {\n          this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n        }\n      }\n    }\n  }\n\n  serializePageNodes() {\n    let data = this.filteredNodes || this.value;\n    this.serializedValue = [];\n\n    if (data && data.length) {\n      const first = this.lazy ? 0 : this.first;\n\n      for (let i = first; i < first + this.rows; i++) {\n        let node = data[i];\n\n        if (node) {\n          this.serializedValue.push({\n            node: node,\n            parent: null,\n            level: 0,\n            visible: true\n          });\n          this.serializeNodes(node, node.children, 1, true);\n        }\n      }\n    }\n  }\n\n  get totalRecords() {\n    return this._totalRecords;\n  }\n\n  set totalRecords(val) {\n    this._totalRecords = val;\n    this.tableService.onTotalRecordsChange(this._totalRecords);\n  }\n\n  get sortField() {\n    return this._sortField;\n  }\n\n  set sortField(val) {\n    this._sortField = val;\n  }\n\n  get sortOrder() {\n    return this._sortOrder;\n  }\n\n  set sortOrder(val) {\n    this._sortOrder = val;\n  }\n\n  get multiSortMeta() {\n    return this._multiSortMeta;\n  }\n\n  set multiSortMeta(val) {\n    this._multiSortMeta = val;\n  }\n\n  get selection() {\n    return this._selection;\n  }\n\n  set selection(val) {\n    this._selection = val;\n  }\n\n  updateSelectionKeys() {\n    if (this.dataKey && this._selection) {\n      this.selectionKeys = {};\n\n      if (Array.isArray(this._selection)) {\n        for (let node of this._selection) {\n          this.selectionKeys[String(ObjectUtils.resolveFieldData(node.data, this.dataKey))] = 1;\n        }\n      } else {\n        this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection.data, this.dataKey))] = 1;\n      }\n    }\n  }\n\n  onPageChange(event) {\n    this.first = event.first;\n    this.rows = event.rows;\n    if (this.lazy) this.onLazyLoad.emit(this.createLazyLoadMetadata());else this.serializePageNodes();\n    this.onPage.emit({\n      first: this.first,\n      rows: this.rows\n    });\n    this.tableService.onUIUpdate(this.value);\n\n    if (this.scrollable) {\n      this.resetScrollTop();\n    }\n  }\n\n  sort(event) {\n    let originalEvent = event.originalEvent;\n\n    if (this.sortMode === 'single') {\n      this._sortOrder = this.sortField === event.field ? this.sortOrder * -1 : this.defaultSortOrder;\n      this._sortField = event.field;\n      this.sortSingle();\n\n      if (this.resetPageOnSort && this.scrollable) {\n        this.resetScrollTop();\n      }\n    }\n\n    if (this.sortMode === 'multiple') {\n      let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n      let sortMeta = this.getSortMeta(event.field);\n\n      if (sortMeta) {\n        if (!metaKey) {\n          this._multiSortMeta = [{\n            field: event.field,\n            order: sortMeta.order * -1\n          }];\n\n          if (this.resetPageOnSort && this.scrollable) {\n            this.resetScrollTop();\n          }\n        } else {\n          sortMeta.order = sortMeta.order * -1;\n        }\n      } else {\n        if (!metaKey || !this.multiSortMeta) {\n          this._multiSortMeta = [];\n\n          if (this.resetPageOnSort && this.scrollable) {\n            this.resetScrollTop();\n          }\n        }\n\n        this.multiSortMeta.push({\n          field: event.field,\n          order: this.defaultSortOrder\n        });\n      }\n\n      this.sortMultiple();\n    }\n  }\n\n  sortSingle() {\n    if (this.sortField && this.sortOrder) {\n      if (this.lazy) {\n        this.onLazyLoad.emit(this.createLazyLoadMetadata());\n      } else if (this.value) {\n        this.sortNodes(this.value);\n\n        if (this.hasFilter()) {\n          this._filter();\n        }\n      }\n\n      let sortMeta = {\n        field: this.sortField,\n        order: this.sortOrder\n      };\n      this.onSort.emit(sortMeta);\n      this.tableService.onSort(sortMeta);\n      this.updateSerializedValue();\n    }\n  }\n\n  sortNodes(nodes) {\n    if (!nodes || nodes.length === 0) {\n      return;\n    }\n\n    if (this.customSort) {\n      this.sortFunction.emit({\n        data: nodes,\n        mode: this.sortMode,\n        field: this.sortField,\n        order: this.sortOrder\n      });\n    } else {\n      nodes.sort((node1, node2) => {\n        let value1 = ObjectUtils.resolveFieldData(node1.data, this.sortField);\n        let value2 = ObjectUtils.resolveFieldData(node2.data, this.sortField);\n        let result = null;\n        if (value1 == null && value2 != null) result = -1;else if (value1 != null && value2 == null) result = 1;else if (value1 == null && value2 == null) result = 0;else if (typeof value1 === 'string' && typeof value2 === 'string') result = value1.localeCompare(value2, undefined, {\n          numeric: true\n        });else result = value1 < value2 ? -1 : value1 > value2 ? 1 : 0;\n        return this.sortOrder * result;\n      });\n    }\n\n    for (let node of nodes) {\n      this.sortNodes(node.children);\n    }\n  }\n\n  sortMultiple() {\n    if (this.multiSortMeta) {\n      if (this.lazy) {\n        this.onLazyLoad.emit(this.createLazyLoadMetadata());\n      } else if (this.value) {\n        this.sortMultipleNodes(this.value);\n\n        if (this.hasFilter()) {\n          this._filter();\n        }\n      }\n\n      this.onSort.emit({\n        multisortmeta: this.multiSortMeta\n      });\n      this.updateSerializedValue();\n      this.tableService.onSort(this.multiSortMeta);\n    }\n  }\n\n  sortMultipleNodes(nodes) {\n    if (!nodes || nodes.length === 0) {\n      return;\n    }\n\n    if (this.customSort) {\n      this.sortFunction.emit({\n        data: this.value,\n        mode: this.sortMode,\n        multiSortMeta: this.multiSortMeta\n      });\n    } else {\n      nodes.sort((node1, node2) => {\n        return this.multisortField(node1, node2, this.multiSortMeta, 0);\n      });\n    }\n\n    for (let node of nodes) {\n      this.sortMultipleNodes(node.children);\n    }\n  }\n\n  multisortField(node1, node2, multiSortMeta, index) {\n    let value1 = ObjectUtils.resolveFieldData(node1.data, multiSortMeta[index].field);\n    let value2 = ObjectUtils.resolveFieldData(node2.data, multiSortMeta[index].field);\n    let result = null;\n    if (value1 == null && value2 != null) result = -1;else if (value1 != null && value2 == null) result = 1;else if (value1 == null && value2 == null) result = 0;\n\n    if (typeof value1 == 'string' || value1 instanceof String) {\n      if (value1.localeCompare && value1 != value2) {\n        return multiSortMeta[index].order * value1.localeCompare(value2, undefined, {\n          numeric: true\n        });\n      }\n    } else {\n      result = value1 < value2 ? -1 : 1;\n    }\n\n    if (value1 == value2) {\n      return multiSortMeta.length - 1 > index ? this.multisortField(node1, node2, multiSortMeta, index + 1) : 0;\n    }\n\n    return multiSortMeta[index].order * result;\n  }\n\n  getSortMeta(field) {\n    if (this.multiSortMeta && this.multiSortMeta.length) {\n      for (let i = 0; i < this.multiSortMeta.length; i++) {\n        if (this.multiSortMeta[i].field === field) {\n          return this.multiSortMeta[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  isSorted(field) {\n    if (this.sortMode === 'single') {\n      return this.sortField && this.sortField === field;\n    } else if (this.sortMode === 'multiple') {\n      let sorted = false;\n\n      if (this.multiSortMeta) {\n        for (let i = 0; i < this.multiSortMeta.length; i++) {\n          if (this.multiSortMeta[i].field == field) {\n            sorted = true;\n            break;\n          }\n        }\n      }\n\n      return sorted;\n    }\n  }\n\n  createLazyLoadMetadata() {\n    return {\n      first: this.first,\n      rows: this.rows,\n      sortField: this.sortField,\n      sortOrder: this.sortOrder,\n      filters: this.filters,\n      globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n      multiSortMeta: this.multiSortMeta\n    };\n  }\n\n  resetScrollTop() {\n    if (this.virtualScroll) this.scrollToVirtualIndex(0);else this.scrollTo({\n      top: 0\n    });\n  }\n\n  scrollToVirtualIndex(index) {\n    if (this.scrollableViewChild) {\n      this.scrollableViewChild.scrollToVirtualIndex(index);\n    }\n\n    if (this.scrollableFrozenViewChild) {\n      this.scrollableFrozenViewChild.scrollToVirtualIndex(index);\n    }\n  }\n\n  scrollTo(options) {\n    if (this.scrollableViewChild) {\n      this.scrollableViewChild.scrollTo(options);\n    }\n\n    if (this.scrollableFrozenViewChild) {\n      this.scrollableFrozenViewChild.scrollTo(options);\n    }\n  }\n\n  isEmpty() {\n    let data = this.filteredNodes || this.value;\n    return data == null || data.length == 0;\n  }\n\n  getBlockableElement() {\n    return this.el.nativeElement.children[0];\n  }\n\n  onColumnResizeBegin(event) {\n    let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n    this.lastResizerHelperX = event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft;\n    event.preventDefault();\n  }\n\n  onColumnResize(event) {\n    let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n    DomHandler.addClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n    this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\n    this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n    this.resizeHelperViewChild.nativeElement.style.left = event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft + 'px';\n    this.resizeHelperViewChild.nativeElement.style.display = 'block';\n  }\n\n  onColumnResizeEnd(event, column) {\n    let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n    let columnWidth = column.offsetWidth;\n    let newColumnWidth = columnWidth + delta;\n    let minWidth = column.style.minWidth || 15;\n\n    if (columnWidth + delta > parseInt(minWidth)) {\n      if (this.columnResizeMode === 'fit') {\n        let nextColumn = column.nextElementSibling;\n\n        while (!nextColumn.offsetParent) {\n          nextColumn = nextColumn.nextElementSibling;\n        }\n\n        if (nextColumn) {\n          let nextColumnWidth = nextColumn.offsetWidth - delta;\n          let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n\n          if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n            if (this.scrollable) {\n              let scrollableView = this.findParentScrollableView(column);\n              let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.p-treetable-virtual-scrollable-body table');\n              let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n              let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n              let resizeColumnIndex = DomHandler.index(column);\n              this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n              this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n              this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n            } else {\n              column.style.width = newColumnWidth + 'px';\n\n              if (nextColumn) {\n                nextColumn.style.width = nextColumnWidth + 'px';\n              }\n            }\n          }\n        }\n      } else if (this.columnResizeMode === 'expand') {\n        if (this.scrollable) {\n          let scrollableView = this.findParentScrollableView(column);\n          let scrollableBody = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body') || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport');\n          let scrollableHeader = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-header');\n          let scrollableFooter = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-footer');\n          let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport table');\n          let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n          let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n          scrollableBodyTable.style.width = scrollableBodyTable.offsetWidth + delta + 'px';\n          scrollableHeaderTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\n\n          if (scrollableFooterTable) {\n            scrollableFooterTable.style.width = scrollableFooterTable.offsetWidth + delta + 'px';\n          }\n\n          let resizeColumnIndex = DomHandler.index(column);\n          const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n          const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n          const isContainerInViewport = this.containerViewChild.nativeElement.offsetWidth >= scrollableBodyTableWidth;\n\n          let setWidth = (container, table, width, isContainerInViewport) => {\n            if (container && table) {\n              container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto';\n              table.style.width = width + 'px';\n            }\n          };\n\n          setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n          setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n          setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n          this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n          this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n          this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n        } else {\n          this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n          column.style.width = newColumnWidth + 'px';\n          let containerWidth = this.tableViewChild.nativeElement.style.width;\n          this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n        }\n      }\n\n      this.onColResize.emit({\n        element: column,\n        delta: delta\n      });\n    }\n\n    this.resizeHelperViewChild.nativeElement.style.display = 'none';\n    DomHandler.removeClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n  }\n\n  findParentScrollableView(column) {\n    if (column) {\n      let parent = column.parentElement;\n\n      while (parent && !DomHandler.hasClass(parent, 'p-treetable-scrollable-view')) {\n        parent = parent.parentElement;\n      }\n\n      return parent;\n    } else {\n      return null;\n    }\n  }\n\n  resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n    if (table) {\n      let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n\n      if (colGroup) {\n        let col = colGroup.children[resizeColumnIndex];\n        let nextCol = col.nextElementSibling;\n        col.style.width = newColumnWidth + 'px';\n\n        if (nextCol && nextColumnWidth) {\n          nextCol.style.width = nextColumnWidth + 'px';\n        }\n      } else {\n        throw \"Scrollable tables require a colgroup to support resizable columns\";\n      }\n    }\n  }\n\n  onColumnDragStart(event, columnElement) {\n    this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\n    this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\n    this.draggedColumn = columnElement;\n    event.dataTransfer.setData('text', 'b'); // For firefox\n  }\n\n  onColumnDragEnter(event, dropHeader) {\n    if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n      event.preventDefault();\n      let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\n      let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n\n      if (this.draggedColumn != dropHeader) {\n        let targetLeft = dropHeaderOffset.left - containerOffset.left;\n        let targetTop = containerOffset.top - dropHeaderOffset.top;\n        let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n        this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n        this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n\n        if (event.pageX > columnCenter) {\n          this.reorderIndicatorUpViewChild.nativeElement.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.reorderIndicatorDownViewChild.nativeElement.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.dropPosition = 1;\n        } else {\n          this.reorderIndicatorUpViewChild.nativeElement.style.left = targetLeft - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.reorderIndicatorDownViewChild.nativeElement.style.left = targetLeft - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.dropPosition = -1;\n        }\n\n        this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n        this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n      } else {\n        event.dataTransfer.dropEffect = 'none';\n      }\n    }\n  }\n\n  onColumnDragLeave(event) {\n    if (this.reorderableColumns && this.draggedColumn) {\n      event.preventDefault();\n      this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n      this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n    }\n  }\n\n  onColumnDrop(event, dropColumn) {\n    event.preventDefault();\n\n    if (this.draggedColumn) {\n      let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'ttreorderablecolumn');\n      let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'ttreorderablecolumn');\n      let allowDrop = dragIndex != dropIndex;\n\n      if (allowDrop && (dropIndex - dragIndex == 1 && this.dropPosition === -1 || dragIndex - dropIndex == 1 && this.dropPosition === 1)) {\n        allowDrop = false;\n      }\n\n      if (allowDrop && dropIndex < dragIndex && this.dropPosition === 1) {\n        dropIndex = dropIndex + 1;\n      }\n\n      if (allowDrop && dropIndex > dragIndex && this.dropPosition === -1) {\n        dropIndex = dropIndex - 1;\n      }\n\n      if (allowDrop) {\n        ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n        this.onColReorder.emit({\n          dragIndex: dragIndex,\n          dropIndex: dropIndex,\n          columns: this.columns\n        });\n      }\n\n      this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n      this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n      this.draggedColumn.draggable = false;\n      this.draggedColumn = null;\n      this.dropPosition = null;\n    }\n  }\n\n  handleRowClick(event) {\n    let targetNode = event.originalEvent.target.nodeName;\n\n    if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || DomHandler.hasClass(event.originalEvent.target, 'p-clickable')) {\n      return;\n    }\n\n    if (this.selectionMode) {\n      this.preventSelectionSetterPropagation = true;\n      let rowNode = event.rowNode;\n      let selected = this.isSelected(rowNode.node);\n      let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n      let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowNode.node.data, this.dataKey)) : null;\n\n      if (metaSelection) {\n        let metaKey = event.originalEvent.metaKey || event.originalEvent.ctrlKey;\n\n        if (selected && metaKey) {\n          if (this.isSingleSelectionMode()) {\n            this._selection = null;\n            this.selectionKeys = {};\n            this.selectionChange.emit(null);\n          } else {\n            let selectionIndex = this.findIndexInSelection(rowNode.node);\n            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n            this.selectionChange.emit(this.selection);\n\n            if (dataKeyValue) {\n              delete this.selectionKeys[dataKeyValue];\n            }\n          }\n\n          this.onNodeUnselect.emit({\n            originalEvent: event.originalEvent,\n            node: rowNode.node,\n            type: 'row'\n          });\n        } else {\n          if (this.isSingleSelectionMode()) {\n            this._selection = rowNode.node;\n            this.selectionChange.emit(rowNode.node);\n\n            if (dataKeyValue) {\n              this.selectionKeys = {};\n              this.selectionKeys[dataKeyValue] = 1;\n            }\n          } else if (this.isMultipleSelectionMode()) {\n            if (metaKey) {\n              this._selection = this.selection || [];\n            } else {\n              this._selection = [];\n              this.selectionKeys = {};\n            }\n\n            this._selection = [...this.selection, rowNode.node];\n            this.selectionChange.emit(this.selection);\n\n            if (dataKeyValue) {\n              this.selectionKeys[dataKeyValue] = 1;\n            }\n          }\n\n          this.onNodeSelect.emit({\n            originalEvent: event.originalEvent,\n            node: rowNode.node,\n            type: 'row',\n            index: event.rowIndex\n          });\n        }\n      } else {\n        if (this.selectionMode === 'single') {\n          if (selected) {\n            this._selection = null;\n            this.selectionKeys = {};\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({\n              originalEvent: event.originalEvent,\n              node: rowNode.node,\n              type: 'row'\n            });\n          } else {\n            this._selection = rowNode.node;\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({\n              originalEvent: event.originalEvent,\n              node: rowNode.node,\n              type: 'row',\n              index: event.rowIndex\n            });\n\n            if (dataKeyValue) {\n              this.selectionKeys = {};\n              this.selectionKeys[dataKeyValue] = 1;\n            }\n          }\n        } else if (this.selectionMode === 'multiple') {\n          if (selected) {\n            let selectionIndex = this.findIndexInSelection(rowNode.node);\n            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({\n              originalEvent: event.originalEvent,\n              node: rowNode.node,\n              type: 'row'\n            });\n\n            if (dataKeyValue) {\n              delete this.selectionKeys[dataKeyValue];\n            }\n          } else {\n            this._selection = this.selection ? [...this.selection, rowNode.node] : [rowNode.node];\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({\n              originalEvent: event.originalEvent,\n              node: rowNode.node,\n              type: 'row',\n              index: event.rowIndex\n            });\n\n            if (dataKeyValue) {\n              this.selectionKeys[dataKeyValue] = 1;\n            }\n          }\n        }\n      }\n\n      this.tableService.onSelectionChange();\n    }\n\n    this.rowTouched = false;\n  }\n\n  handleRowTouchEnd(event) {\n    this.rowTouched = true;\n  }\n\n  handleRowRightClick(event) {\n    if (this.contextMenu) {\n      const node = event.rowNode.node;\n\n      if (this.contextMenuSelectionMode === 'separate') {\n        this.contextMenuSelection = node;\n        this.contextMenuSelectionChange.emit(node);\n        this.onContextMenuSelect.emit({\n          originalEvent: event.originalEvent,\n          node: node\n        });\n        this.contextMenu.show(event.originalEvent);\n        this.tableService.onContextMenu(node);\n      } else if (this.contextMenuSelectionMode === 'joint') {\n        this.preventSelectionSetterPropagation = true;\n        let selected = this.isSelected(node);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n        if (!selected) {\n          if (this.isSingleSelectionMode()) {\n            this.selection = node;\n            this.selectionChange.emit(node);\n          } else if (this.isMultipleSelectionMode()) {\n            this.selection = [node];\n            this.selectionChange.emit(this.selection);\n          }\n\n          if (dataKeyValue) {\n            this.selectionKeys[dataKeyValue] = 1;\n          }\n        }\n\n        this.contextMenu.show(event.originalEvent);\n        this.onContextMenuSelect.emit({\n          originalEvent: event.originalEvent,\n          node: node\n        });\n      }\n    }\n  }\n\n  toggleNodeWithCheckbox(event) {\n    this.selection = this.selection || [];\n    this.preventSelectionSetterPropagation = true;\n    let node = event.rowNode.node;\n    let selected = this.isSelected(node);\n\n    if (selected) {\n      this.propagateSelectionDown(node, false);\n\n      if (event.rowNode.parent) {\n        this.propagateSelectionUp(node.parent, false);\n      }\n\n      this.selectionChange.emit(this.selection);\n      this.onNodeUnselect.emit({\n        originalEvent: event,\n        node: node\n      });\n    } else {\n      this.propagateSelectionDown(node, true);\n\n      if (event.rowNode.parent) {\n        this.propagateSelectionUp(node.parent, true);\n      }\n\n      this.selectionChange.emit(this.selection);\n      this.onNodeSelect.emit({\n        originalEvent: event,\n        node: node\n      });\n    }\n\n    this.tableService.onSelectionChange();\n  }\n\n  toggleNodesWithCheckbox(event, check) {\n    let data = this.filteredNodes || this.value;\n    this._selection = check && data ? data.slice() : [];\n\n    if (check) {\n      if (data && data.length) {\n        for (let node of data) {\n          this.propagateSelectionDown(node, true);\n        }\n      }\n    } else {\n      this._selection = [];\n      this.selectionKeys = {};\n    }\n\n    this.preventSelectionSetterPropagation = true;\n    this.selectionChange.emit(this._selection);\n    this.tableService.onSelectionChange();\n    this.onHeaderCheckboxToggle.emit({\n      originalEvent: event,\n      checked: check\n    });\n  }\n\n  propagateSelectionUp(node, select) {\n    if (node.children && node.children.length) {\n      let selectedChildCount = 0;\n      let childPartialSelected = false;\n      let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n      for (let child of node.children) {\n        if (this.isSelected(child)) selectedChildCount++;else if (child.partialSelected) childPartialSelected = true;\n      }\n\n      if (select && selectedChildCount == node.children.length) {\n        this._selection = [...(this.selection || []), node];\n        node.partialSelected = false;\n\n        if (dataKeyValue) {\n          this.selectionKeys[dataKeyValue] = 1;\n        }\n      } else {\n        if (!select) {\n          let index = this.findIndexInSelection(node);\n\n          if (index >= 0) {\n            this._selection = this.selection.filter((val, i) => i != index);\n\n            if (dataKeyValue) {\n              delete this.selectionKeys[dataKeyValue];\n            }\n          }\n        }\n\n        if (childPartialSelected || selectedChildCount > 0 && selectedChildCount != node.children.length) node.partialSelected = true;else node.partialSelected = false;\n      }\n    }\n\n    let parent = node.parent;\n\n    if (parent) {\n      this.propagateSelectionUp(parent, select);\n    }\n  }\n\n  propagateSelectionDown(node, select) {\n    let index = this.findIndexInSelection(node);\n    let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n    if (select && index == -1) {\n      this._selection = [...(this.selection || []), node];\n\n      if (dataKeyValue) {\n        this.selectionKeys[dataKeyValue] = 1;\n      }\n    } else if (!select && index > -1) {\n      this._selection = this.selection.filter((val, i) => i != index);\n\n      if (dataKeyValue) {\n        delete this.selectionKeys[dataKeyValue];\n      }\n    }\n\n    node.partialSelected = false;\n\n    if (node.children && node.children.length) {\n      for (let child of node.children) {\n        this.propagateSelectionDown(child, select);\n      }\n    }\n  }\n\n  isSelected(node) {\n    if (node && this.selection) {\n      if (this.dataKey) {\n        return this.selectionKeys[ObjectUtils.resolveFieldData(node.data, this.dataKey)] !== undefined;\n      } else {\n        if (this.selection instanceof Array) return this.findIndexInSelection(node) > -1;else return this.equals(node, this.selection);\n      }\n    }\n\n    return false;\n  }\n\n  findIndexInSelection(node) {\n    let index = -1;\n\n    if (this.selection && this.selection.length) {\n      for (let i = 0; i < this.selection.length; i++) {\n        if (this.equals(node, this.selection[i])) {\n          index = i;\n          break;\n        }\n      }\n    }\n\n    return index;\n  }\n\n  isSingleSelectionMode() {\n    return this.selectionMode === 'single';\n  }\n\n  isMultipleSelectionMode() {\n    return this.selectionMode === 'multiple';\n  }\n\n  equals(node1, node2) {\n    return this.compareSelectionBy === 'equals' ? node1 === node2 : ObjectUtils.equals(node1.data, node2.data, this.dataKey);\n  }\n\n  filter(value, field, matchMode) {\n    if (this.filterTimeout) {\n      clearTimeout(this.filterTimeout);\n    }\n\n    if (!this.isFilterBlank(value)) {\n      this.filters[field] = {\n        value: value,\n        matchMode: matchMode\n      };\n    } else if (this.filters[field]) {\n      delete this.filters[field];\n    }\n\n    this.filterTimeout = setTimeout(() => {\n      this._filter();\n\n      this.filterTimeout = null;\n    }, this.filterDelay);\n  }\n\n  filterGlobal(value, matchMode) {\n    this.filter(value, 'global', matchMode);\n  }\n\n  isFilterBlank(filter) {\n    if (filter !== null && filter !== undefined) {\n      if (typeof filter === 'string' && filter.trim().length == 0 || filter instanceof Array && filter.length == 0) return true;else return false;\n    }\n\n    return true;\n  }\n\n  _filter() {\n    if (this.lazy) {\n      this.onLazyLoad.emit(this.createLazyLoadMetadata());\n    } else {\n      if (!this.value) {\n        return;\n      }\n\n      if (!this.hasFilter()) {\n        this.filteredNodes = null;\n\n        if (this.paginator) {\n          this.totalRecords = this.value ? this.value.length : 0;\n        }\n      } else {\n        let globalFilterFieldsArray;\n\n        if (this.filters['global']) {\n          if (!this.columns && !this.globalFilterFields) throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');else globalFilterFieldsArray = this.globalFilterFields || this.columns;\n        }\n\n        this.filteredNodes = [];\n        const isStrictMode = this.filterMode === 'strict';\n        let isValueChanged = false;\n\n        for (let node of this.value) {\n          let copyNode = Object.assign({}, node);\n          let localMatch = true;\n          let globalMatch = false;\n          let paramsWithoutNode;\n\n          for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n              let filterMeta = this.filters[prop];\n              let filterField = prop;\n              let filterValue = filterMeta.value;\n              let filterMatchMode = filterMeta.matchMode || 'startsWith';\n              let filterConstraint = this.filterService.filters[filterMatchMode];\n              paramsWithoutNode = {\n                filterField,\n                filterValue,\n                filterConstraint,\n                isStrictMode\n              };\n\n              if (isStrictMode && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode)) || !isStrictMode && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode))) {\n                localMatch = false;\n              }\n\n              if (!localMatch) {\n                break;\n              }\n            }\n          }\n\n          if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n            for (let j = 0; j < globalFilterFieldsArray.length; j++) {\n              let copyNodeForGlobal = Object.assign({}, copyNode);\n              let filterField = globalFilterFieldsArray[j].field || globalFilterFieldsArray[j];\n              let filterValue = this.filters['global'].value;\n              let filterConstraint = this.filterService.filters[this.filters['global'].matchMode];\n              paramsWithoutNode = {\n                filterField,\n                filterValue,\n                filterConstraint,\n                isStrictMode\n              };\n\n              if (isStrictMode && (this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode)) || !isStrictMode && (this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode))) {\n                globalMatch = true;\n                copyNode = copyNodeForGlobal;\n              }\n            }\n          }\n\n          let matches = localMatch;\n\n          if (this.filters['global']) {\n            matches = localMatch && globalMatch;\n          }\n\n          if (matches) {\n            this.filteredNodes.push(copyNode);\n          }\n\n          isValueChanged = isValueChanged || !localMatch || globalMatch || localMatch && this.filteredNodes.length > 0 || !globalMatch && this.filteredNodes.length === 0;\n        }\n\n        if (!isValueChanged) {\n          this.filteredNodes = null;\n        }\n\n        if (this.paginator) {\n          this.totalRecords = this.filteredNodes ? this.filteredNodes.length : this.value ? this.value.length : 0;\n        }\n      }\n    }\n\n    this.first = 0;\n    const filteredValue = this.filteredNodes || this.value;\n    this.onFilter.emit({\n      filters: this.filters,\n      filteredValue: filteredValue\n    });\n    this.tableService.onUIUpdate(filteredValue);\n    this.updateSerializedValue();\n\n    if (this.scrollable) {\n      this.resetScrollTop();\n    }\n  }\n\n  findFilteredNodes(node, paramsWithoutNode) {\n    if (node) {\n      let matched = false;\n\n      if (node.children) {\n        let childNodes = [...node.children];\n        node.children = [];\n\n        for (let childNode of childNodes) {\n          let copyChildNode = Object.assign({}, childNode);\n\n          if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n            matched = true;\n            node.children.push(copyChildNode);\n          }\n        }\n      }\n\n      if (matched) {\n        return true;\n      }\n    }\n  }\n\n  isFilterMatched(node, {\n    filterField,\n    filterValue,\n    filterConstraint,\n    isStrictMode\n  }) {\n    let matched = false;\n    let dataFieldValue = ObjectUtils.resolveFieldData(node.data, filterField);\n\n    if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n      matched = true;\n    }\n\n    if (!matched || isStrictMode && !this.isNodeLeaf(node)) {\n      matched = this.findFilteredNodes(node, {\n        filterField,\n        filterValue,\n        filterConstraint,\n        isStrictMode\n      }) || matched;\n    }\n\n    return matched;\n  }\n\n  isNodeLeaf(node) {\n    return node.leaf === false ? false : !(node.children && node.children.length);\n  }\n\n  hasFilter() {\n    let empty = true;\n\n    for (let prop in this.filters) {\n      if (this.filters.hasOwnProperty(prop)) {\n        empty = false;\n        break;\n      }\n    }\n\n    return !empty;\n  }\n\n  reset() {\n    this._sortField = null;\n    this._sortOrder = 1;\n    this._multiSortMeta = null;\n    this.tableService.onSort(null);\n    this.filteredNodes = null;\n    this.filters = {};\n    this.first = 0;\n\n    if (this.lazy) {\n      this.onLazyLoad.emit(this.createLazyLoadMetadata());\n    } else {\n      this.totalRecords = this._value ? this._value.length : 0;\n    }\n  }\n\n  updateEditingCell(cell, data, field) {\n    this.editingCell = cell;\n    this.editingCellData = data;\n    this.editingCellField = field;\n    this.bindDocumentEditListener();\n  }\n\n  isEditingCellValid() {\n    return this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0;\n  }\n\n  bindDocumentEditListener() {\n    if (!this.documentEditListener) {\n      this.documentEditListener = event => {\n        if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n          DomHandler.removeClass(this.editingCell, 'p-cell-editing');\n          this.editingCell = null;\n          this.onEditComplete.emit({\n            field: this.editingCellField,\n            data: this.editingCellData\n          });\n          this.editingCellField = null;\n          this.editingCellData = null;\n          this.unbindDocumentEditListener();\n        }\n\n        this.editingCellClick = false;\n      };\n\n      document.addEventListener('click', this.documentEditListener);\n    }\n  }\n\n  unbindDocumentEditListener() {\n    if (this.documentEditListener) {\n      document.removeEventListener('click', this.documentEditListener);\n      this.documentEditListener = null;\n    }\n  }\n\n  ngOnDestroy() {\n    this.unbindDocumentEditListener();\n    this.editingCell = null;\n    this.editingCellField = null;\n    this.editingCellData = null;\n    this.initialized = null;\n  }\n\n}\n\nTreeTable.ɵfac = function TreeTable_Factory(t) {\n  return new (t || TreeTable)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i1.FilterService));\n};\n\nTreeTable.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeTable,\n  selectors: [[\"p-treeTable\"]],\n  contentQueries: function TreeTable_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n    }\n  },\n  viewQuery: function TreeTable_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n      i0.ɵɵviewQuery(_c2, 5);\n      i0.ɵɵviewQuery(_c3, 5);\n      i0.ɵɵviewQuery(_c4, 5);\n      i0.ɵɵviewQuery(_c5, 5);\n      i0.ɵɵviewQuery(_c6, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.resizeHelperViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.reorderIndicatorUpViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.reorderIndicatorDownViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollableViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollableFrozenViewChild = _t.first);\n    }\n  },\n  hostAttrs: [1, \"p-element\"],\n  inputs: {\n    columns: \"columns\",\n    style: \"style\",\n    styleClass: \"styleClass\",\n    tableStyle: \"tableStyle\",\n    tableStyleClass: \"tableStyleClass\",\n    autoLayout: \"autoLayout\",\n    lazy: \"lazy\",\n    lazyLoadOnInit: \"lazyLoadOnInit\",\n    paginator: \"paginator\",\n    rows: \"rows\",\n    first: \"first\",\n    pageLinks: \"pageLinks\",\n    rowsPerPageOptions: \"rowsPerPageOptions\",\n    alwaysShowPaginator: \"alwaysShowPaginator\",\n    paginatorPosition: \"paginatorPosition\",\n    paginatorDropdownAppendTo: \"paginatorDropdownAppendTo\",\n    currentPageReportTemplate: \"currentPageReportTemplate\",\n    showCurrentPageReport: \"showCurrentPageReport\",\n    showJumpToPageDropdown: \"showJumpToPageDropdown\",\n    showFirstLastIcon: \"showFirstLastIcon\",\n    showPageLinks: \"showPageLinks\",\n    defaultSortOrder: \"defaultSortOrder\",\n    sortMode: \"sortMode\",\n    resetPageOnSort: \"resetPageOnSort\",\n    customSort: \"customSort\",\n    selectionMode: \"selectionMode\",\n    contextMenuSelection: \"contextMenuSelection\",\n    contextMenuSelectionMode: \"contextMenuSelectionMode\",\n    dataKey: \"dataKey\",\n    metaKeySelection: \"metaKeySelection\",\n    compareSelectionBy: \"compareSelectionBy\",\n    rowHover: \"rowHover\",\n    loading: \"loading\",\n    loadingIcon: \"loadingIcon\",\n    showLoader: \"showLoader\",\n    scrollable: \"scrollable\",\n    scrollHeight: \"scrollHeight\",\n    virtualScroll: \"virtualScroll\",\n    virtualScrollDelay: \"virtualScrollDelay\",\n    virtualRowHeight: \"virtualRowHeight\",\n    minBufferPx: \"minBufferPx\",\n    maxBufferPx: \"maxBufferPx\",\n    frozenWidth: \"frozenWidth\",\n    frozenColumns: \"frozenColumns\",\n    resizableColumns: \"resizableColumns\",\n    columnResizeMode: \"columnResizeMode\",\n    reorderableColumns: \"reorderableColumns\",\n    contextMenu: \"contextMenu\",\n    rowTrackBy: \"rowTrackBy\",\n    filters: \"filters\",\n    globalFilterFields: \"globalFilterFields\",\n    filterDelay: \"filterDelay\",\n    filterMode: \"filterMode\",\n    filterLocale: \"filterLocale\",\n    value: \"value\",\n    totalRecords: \"totalRecords\",\n    sortField: \"sortField\",\n    sortOrder: \"sortOrder\",\n    multiSortMeta: \"multiSortMeta\",\n    selection: \"selection\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\",\n    contextMenuSelectionChange: \"contextMenuSelectionChange\",\n    onFilter: \"onFilter\",\n    onNodeExpand: \"onNodeExpand\",\n    onNodeCollapse: \"onNodeCollapse\",\n    onPage: \"onPage\",\n    onSort: \"onSort\",\n    onLazyLoad: \"onLazyLoad\",\n    sortFunction: \"sortFunction\",\n    onColResize: \"onColResize\",\n    onColReorder: \"onColReorder\",\n    onNodeSelect: \"onNodeSelect\",\n    onNodeUnselect: \"onNodeUnselect\",\n    onContextMenuSelect: \"onContextMenuSelect\",\n    onHeaderCheckboxToggle: \"onHeaderCheckboxToggle\",\n    onEditInit: \"onEditInit\",\n    onEditComplete: \"onEditComplete\",\n    onEditCancel: \"onEditCancel\"\n  },\n  features: [i0.ɵɵProvidersFeature([TreeTableService]), i0.ɵɵNgOnChangesFeature],\n  decls: 12,\n  vars: 20,\n  consts: [[\"data-scrollselectors\", \".p-treetable-scrollable-body\", 3, \"ngStyle\", \"ngClass\"], [\"container\", \"\"], [\"class\", \"p-treetable-loading\", 4, \"ngIf\"], [\"class\", \"p-treetable-header\", 4, \"ngIf\"], [\"styleClass\", \"p-paginator-top\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"onPageChange\", 4, \"ngIf\"], [\"class\", \"p-treetable-wrapper\", 4, \"ngIf\"], [\"class\", \"p-treetable-scrollable-wrapper\", 4, \"ngIf\"], [\"styleClass\", \"p-paginator-bottom\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"onPageChange\", 4, \"ngIf\"], [\"class\", \"p-treetable-footer\", 4, \"ngIf\"], [\"class\", \"p-column-resizer-helper\", \"style\", \"display:none\", 4, \"ngIf\"], [\"class\", \"pi pi-arrow-down p-treetable-reorder-indicator-up\", 4, \"ngIf\"], [\"class\", \"pi pi-arrow-up p-treetable-reorder-indicator-down\", 4, \"ngIf\"], [1, \"p-treetable-loading\"], [1, \"p-treetable-loading-overlay\", \"p-component-overlay\"], [1, \"p-treetable-header\"], [4, \"ngTemplateOutlet\"], [\"styleClass\", \"p-paginator-top\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"onPageChange\"], [1, \"p-treetable-wrapper\"], [3, \"ngClass\", \"ngStyle\"], [\"table\", \"\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"p-treetable-thead\"], [1, \"p-treetable-tbody\", 3, \"pTreeTableBody\", \"pTreeTableBodyTemplate\"], [1, \"p-treetable-tfoot\"], [1, \"p-treetable-scrollable-wrapper\"], [\"class\", \"p-treetable-scrollable-view p-treetable-frozen-view\", 3, \"ttScrollableView\", \"frozen\", \"ngStyle\", \"scrollHeight\", 4, \"ngIf\"], [1, \"p-treetable-scrollable-view\", 3, \"ttScrollableView\", \"frozen\", \"scrollHeight\", \"ngStyle\"], [\"scrollableView\", \"\"], [1, \"p-treetable-scrollable-view\", \"p-treetable-frozen-view\", 3, \"ttScrollableView\", \"frozen\", \"ngStyle\", \"scrollHeight\"], [\"scrollableFrozenView\", \"\"], [\"styleClass\", \"p-paginator-bottom\", 3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showPageLinks\", \"onPageChange\"], [1, \"p-treetable-footer\"], [1, \"p-column-resizer-helper\", 2, \"display\", \"none\"], [\"resizeHelper\", \"\"], [1, \"pi\", \"pi-arrow-down\", \"p-treetable-reorder-indicator-up\"], [\"reorderIndicatorUp\", \"\"], [1, \"pi\", \"pi-arrow-up\", \"p-treetable-reorder-indicator-down\"], [\"reorderIndicatorDown\", \"\"]],\n  template: function TreeTable_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵtemplate(2, TreeTable_div_2_Template, 3, 2, \"div\", 2);\n      i0.ɵɵtemplate(3, TreeTable_div_3_Template, 2, 1, \"div\", 3);\n      i0.ɵɵtemplate(4, TreeTable_p_paginator_4_Template, 1, 15, \"p-paginator\", 4);\n      i0.ɵɵtemplate(5, TreeTable_div_5_Template, 9, 16, \"div\", 5);\n      i0.ɵɵtemplate(6, TreeTable_div_6_Template, 4, 8, \"div\", 6);\n      i0.ɵɵtemplate(7, TreeTable_p_paginator_7_Template, 1, 15, \"p-paginator\", 7);\n      i0.ɵɵtemplate(8, TreeTable_div_8_Template, 2, 1, \"div\", 8);\n      i0.ɵɵtemplate(9, TreeTable_div_9_Template, 2, 0, \"div\", 9);\n      i0.ɵɵtemplate(10, TreeTable_span_10_Template, 2, 0, \"span\", 10);\n      i0.ɵɵtemplate(11, TreeTable_span_11_Template, 2, 0, \"span\", 11);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.styleClass);\n      i0.ɵɵproperty(\"ngStyle\", ctx.style)(\"ngClass\", i0.ɵɵpureFunction5(14, _c10, ctx.rowHover || ctx.selectionMode === \"single\" || ctx.selectionMode === \"multiple\", ctx.autoLayout, ctx.resizableColumns, ctx.resizableColumns && ctx.columnResizeMode === \"fit\", ctx.scrollable && ctx.scrollHeight === \"flex\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.loading && ctx.showLoader);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.captionTemplate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.paginator && (ctx.paginatorPosition === \"top\" || ctx.paginatorPosition == \"both\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.scrollable);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.scrollable);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.paginator && (ctx.paginatorPosition === \"bottom\" || ctx.paginatorPosition == \"both\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.summaryTemplate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.resizableColumns);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.reorderableColumns);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.reorderableColumns);\n    }\n  },\n  directives: function () {\n    return [i2.Paginator, TTBody, TTScrollableView, i3.NgStyle, i3.NgClass, i3.NgIf, i3.NgTemplateOutlet];\n  },\n  styles: [\".p-treetable{position:relative}.p-treetable table{border-collapse:collapse;width:100%;table-layout:fixed}.p-treetable .p-sortable-column{cursor:pointer;-webkit-user-select:none;user-select:none}.p-treetable .p-sortable-column .p-column-title,.p-treetable .p-sortable-column .p-sortable-column-icon,.p-treetable .p-sortable-column .p-sortable-column-badge{vertical-align:middle}.p-treetable .p-sortable-column .p-sortable-column-badge{display:inline-flex;align-items:center;justify-content:center}.p-treetable-auto-layout>.p-treetable-wrapper{overflow-x:auto}.p-treetable-auto-layout>.p-treetable-wrapper>table{table-layout:auto}.p-treetable-hoverable-rows .p-treetable-tbody>tr{cursor:pointer}.p-treetable-toggler{cursor:pointer;-webkit-user-select:none;user-select:none;display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;overflow:hidden;position:relative}p-treetabletoggler+p-treetablecheckbox .p-checkbox{vertical-align:middle}p-treetabletoggler+p-treetablecheckbox+span{vertical-align:middle}.p-treetable-scrollable-wrapper{position:relative}.p-treetable-scrollable-header,.p-treetable-scrollable-footer{overflow:hidden}.p-treetable-scrollable-body{overflow:auto;position:relative}.p-treetable-scrollable-body>table>.p-treetable-tbody>tr:first-child>td{border-top:0 none}.p-treetable-virtual-table{position:absolute}.p-treetable-frozen-view .p-treetable-scrollable-body{overflow:hidden}.p-treetable-frozen-view>.p-treetable-scrollable-body>table>.p-treetable-tbody>tr>td:last-child{border-right:0 none}.p-treetable-unfrozen-view{position:absolute;top:0}.p-treetable-flex-scrollable,.p-treetable-flex-scrollable .p-treetable-scrollable-wrapper,.p-treetable-flex-scrollable .p-treetable-scrollable-view{display:flex;flex-direction:column;flex:1;height:100%}.p-treetable-flex-scrollable .p-treetable-virtual-scrollable-body{flex:1}.p-treetable-resizable>.p-treetable-wrapper{overflow-x:auto}.p-treetable-resizable .p-treetable-thead>tr>th,.p-treetable-resizable .p-treetable-tfoot>tr>td,.p-treetable-resizable .p-treetable-tbody>tr>td{overflow:hidden}.p-treetable-resizable .p-resizable-column{background-clip:padding-box;position:relative}.p-treetable-resizable-fit .p-resizable-column:last-child .p-column-resizer{display:none}.p-treetable .p-column-resizer{display:block;position:absolute!important;top:0;right:0;margin:0;width:.5rem;height:100%;padding:0;cursor:col-resize;border:1px solid transparent}.p-treetable .p-column-resizer-helper{width:1px;position:absolute;z-index:10;display:none}.p-treetable .p-row-editor-init,.p-treetable .p-row-editor-save,.p-treetable .p-row-editor-cancel,.p-treetable .p-row-toggler{display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative}.p-treetable-reorder-indicator-up,.p-treetable-reorder-indicator-down{position:absolute;display:none}[ttReorderableColumn]{cursor:move}.p-treetable .p-treetable-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}\\n\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTable, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTable',\n      template: `\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\" data-scrollselectors=\".p-treetable-scrollable-body\"\n                [ngClass]=\"{'p-treetable p-component': true,\n                'p-treetable-hoverable-rows': (rowHover||(selectionMode === 'single' || selectionMode === 'multiple')),\n                'p-treetable-auto-layout': autoLayout,\n                'p-treetable-resizable': resizableColumns,\n                'p-treetable-resizable-fit': (resizableColumns && columnResizeMode === 'fit'),\n                'p-treetable-flex-scrollable': (scrollable && scrollHeight === 'flex')}\">\n            <div class=\"p-treetable-loading\" *ngIf=\"loading && showLoader\">\n                <div class=\"p-treetable-loading-overlay p-component-overlay\">\n                    <i [class]=\"'p-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\n                </div>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"p-treetable-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\n\n            <div class=\"p-treetable-wrapper\" *ngIf=\"!scrollable\">\n                <table #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"p-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\n               <div class=\"p-treetable-scrollable-view p-treetable-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" #scrollableFrozenView [ttScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\n               <div class=\"p-treetable-scrollable-view\" #scrollableView [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{left: frozenWidth, width: 'calc(100% - '+frozenWidth+')'}\"></div>\n            </div>\n\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\n            <div *ngIf=\"summaryTemplate\" class=\"p-treetable-footer\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"p-column-resizer-helper\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down p-treetable-reorder-indicator-up\" *ngIf=\"reorderableColumns\"></span>\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up p-treetable-reorder-indicator-down\" *ngIf=\"reorderableColumns\"></span>\n        </div>\n    `,\n      providers: [TreeTableService],\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        'class': 'p-element'\n      },\n      styles: [\".p-treetable{position:relative}.p-treetable table{border-collapse:collapse;width:100%;table-layout:fixed}.p-treetable .p-sortable-column{cursor:pointer;-webkit-user-select:none;user-select:none}.p-treetable .p-sortable-column .p-column-title,.p-treetable .p-sortable-column .p-sortable-column-icon,.p-treetable .p-sortable-column .p-sortable-column-badge{vertical-align:middle}.p-treetable .p-sortable-column .p-sortable-column-badge{display:inline-flex;align-items:center;justify-content:center}.p-treetable-auto-layout>.p-treetable-wrapper{overflow-x:auto}.p-treetable-auto-layout>.p-treetable-wrapper>table{table-layout:auto}.p-treetable-hoverable-rows .p-treetable-tbody>tr{cursor:pointer}.p-treetable-toggler{cursor:pointer;-webkit-user-select:none;user-select:none;display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;overflow:hidden;position:relative}p-treetabletoggler+p-treetablecheckbox .p-checkbox{vertical-align:middle}p-treetabletoggler+p-treetablecheckbox+span{vertical-align:middle}.p-treetable-scrollable-wrapper{position:relative}.p-treetable-scrollable-header,.p-treetable-scrollable-footer{overflow:hidden}.p-treetable-scrollable-body{overflow:auto;position:relative}.p-treetable-scrollable-body>table>.p-treetable-tbody>tr:first-child>td{border-top:0 none}.p-treetable-virtual-table{position:absolute}.p-treetable-frozen-view .p-treetable-scrollable-body{overflow:hidden}.p-treetable-frozen-view>.p-treetable-scrollable-body>table>.p-treetable-tbody>tr>td:last-child{border-right:0 none}.p-treetable-unfrozen-view{position:absolute;top:0}.p-treetable-flex-scrollable,.p-treetable-flex-scrollable .p-treetable-scrollable-wrapper,.p-treetable-flex-scrollable .p-treetable-scrollable-view{display:flex;flex-direction:column;flex:1;height:100%}.p-treetable-flex-scrollable .p-treetable-virtual-scrollable-body{flex:1}.p-treetable-resizable>.p-treetable-wrapper{overflow-x:auto}.p-treetable-resizable .p-treetable-thead>tr>th,.p-treetable-resizable .p-treetable-tfoot>tr>td,.p-treetable-resizable .p-treetable-tbody>tr>td{overflow:hidden}.p-treetable-resizable .p-resizable-column{background-clip:padding-box;position:relative}.p-treetable-resizable-fit .p-resizable-column:last-child .p-column-resizer{display:none}.p-treetable .p-column-resizer{display:block;position:absolute!important;top:0;right:0;margin:0;width:.5rem;height:100%;padding:0;cursor:col-resize;border:1px solid transparent}.p-treetable .p-column-resizer-helper{width:1px;position:absolute;z-index:10;display:none}.p-treetable .p-row-editor-init,.p-treetable .p-row-editor-save,.p-treetable .p-row-editor-cancel,.p-treetable .p-row-toggler{display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative}.p-treetable-reorder-indicator-up,.p-treetable-reorder-indicator-down{position:absolute;display:none}[ttReorderableColumn]{cursor:move}.p-treetable .p-treetable-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: TreeTableService\n    }, {\n      type: i1.FilterService\n    }];\n  }, {\n    columns: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    tableStyle: [{\n      type: Input\n    }],\n    tableStyleClass: [{\n      type: Input\n    }],\n    autoLayout: [{\n      type: Input\n    }],\n    lazy: [{\n      type: Input\n    }],\n    lazyLoadOnInit: [{\n      type: Input\n    }],\n    paginator: [{\n      type: Input\n    }],\n    rows: [{\n      type: Input\n    }],\n    first: [{\n      type: Input\n    }],\n    pageLinks: [{\n      type: Input\n    }],\n    rowsPerPageOptions: [{\n      type: Input\n    }],\n    alwaysShowPaginator: [{\n      type: Input\n    }],\n    paginatorPosition: [{\n      type: Input\n    }],\n    paginatorDropdownAppendTo: [{\n      type: Input\n    }],\n    currentPageReportTemplate: [{\n      type: Input\n    }],\n    showCurrentPageReport: [{\n      type: Input\n    }],\n    showJumpToPageDropdown: [{\n      type: Input\n    }],\n    showFirstLastIcon: [{\n      type: Input\n    }],\n    showPageLinks: [{\n      type: Input\n    }],\n    defaultSortOrder: [{\n      type: Input\n    }],\n    sortMode: [{\n      type: Input\n    }],\n    resetPageOnSort: [{\n      type: Input\n    }],\n    customSort: [{\n      type: Input\n    }],\n    selectionMode: [{\n      type: Input\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    contextMenuSelection: [{\n      type: Input\n    }],\n    contextMenuSelectionChange: [{\n      type: Output\n    }],\n    contextMenuSelectionMode: [{\n      type: Input\n    }],\n    dataKey: [{\n      type: Input\n    }],\n    metaKeySelection: [{\n      type: Input\n    }],\n    compareSelectionBy: [{\n      type: Input\n    }],\n    rowHover: [{\n      type: Input\n    }],\n    loading: [{\n      type: Input\n    }],\n    loadingIcon: [{\n      type: Input\n    }],\n    showLoader: [{\n      type: Input\n    }],\n    scrollable: [{\n      type: Input\n    }],\n    scrollHeight: [{\n      type: Input\n    }],\n    virtualScroll: [{\n      type: Input\n    }],\n    virtualScrollDelay: [{\n      type: Input\n    }],\n    virtualRowHeight: [{\n      type: Input\n    }],\n    minBufferPx: [{\n      type: Input\n    }],\n    maxBufferPx: [{\n      type: Input\n    }],\n    frozenWidth: [{\n      type: Input\n    }],\n    frozenColumns: [{\n      type: Input\n    }],\n    resizableColumns: [{\n      type: Input\n    }],\n    columnResizeMode: [{\n      type: Input\n    }],\n    reorderableColumns: [{\n      type: Input\n    }],\n    contextMenu: [{\n      type: Input\n    }],\n    rowTrackBy: [{\n      type: Input\n    }],\n    filters: [{\n      type: Input\n    }],\n    globalFilterFields: [{\n      type: Input\n    }],\n    filterDelay: [{\n      type: Input\n    }],\n    filterMode: [{\n      type: Input\n    }],\n    filterLocale: [{\n      type: Input\n    }],\n    onFilter: [{\n      type: Output\n    }],\n    onNodeExpand: [{\n      type: Output\n    }],\n    onNodeCollapse: [{\n      type: Output\n    }],\n    onPage: [{\n      type: Output\n    }],\n    onSort: [{\n      type: Output\n    }],\n    onLazyLoad: [{\n      type: Output\n    }],\n    sortFunction: [{\n      type: Output\n    }],\n    onColResize: [{\n      type: Output\n    }],\n    onColReorder: [{\n      type: Output\n    }],\n    onNodeSelect: [{\n      type: Output\n    }],\n    onNodeUnselect: [{\n      type: Output\n    }],\n    onContextMenuSelect: [{\n      type: Output\n    }],\n    onHeaderCheckboxToggle: [{\n      type: Output\n    }],\n    onEditInit: [{\n      type: Output\n    }],\n    onEditComplete: [{\n      type: Output\n    }],\n    onEditCancel: [{\n      type: Output\n    }],\n    containerViewChild: [{\n      type: ViewChild,\n      args: ['container']\n    }],\n    resizeHelperViewChild: [{\n      type: ViewChild,\n      args: ['resizeHelper']\n    }],\n    reorderIndicatorUpViewChild: [{\n      type: ViewChild,\n      args: ['reorderIndicatorUp']\n    }],\n    reorderIndicatorDownViewChild: [{\n      type: ViewChild,\n      args: ['reorderIndicatorDown']\n    }],\n    tableViewChild: [{\n      type: ViewChild,\n      args: ['table']\n    }],\n    scrollableViewChild: [{\n      type: ViewChild,\n      args: ['scrollableView']\n    }],\n    scrollableFrozenViewChild: [{\n      type: ViewChild,\n      args: ['scrollableFrozenView']\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }],\n    value: [{\n      type: Input\n    }],\n    totalRecords: [{\n      type: Input\n    }],\n    sortField: [{\n      type: Input\n    }],\n    sortOrder: [{\n      type: Input\n    }],\n    multiSortMeta: [{\n      type: Input\n    }],\n    selection: [{\n      type: Input\n    }]\n  });\n})();\n\nclass TTBody {\n  constructor(tt, treeTableService, cd) {\n    this.tt = tt;\n    this.treeTableService = treeTableService;\n    this.cd = cd;\n    this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n      if (this.tt.virtualScroll) {\n        this.cd.detectChanges();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n}\n\nTTBody.ɵfac = function TTBody_Factory(t) {\n  return new (t || TTBody)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nTTBody.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TTBody,\n  selectors: [[\"\", \"pTreeTableBody\", \"\"]],\n  hostAttrs: [1, \"p-element\"],\n  inputs: {\n    columns: [\"pTreeTableBody\", \"columns\"],\n    template: [\"pTreeTableBodyTemplate\", \"template\"],\n    frozen: \"frozen\"\n  },\n  attrs: _c11,\n  decls: 3,\n  vars: 3,\n  consts: [[4, \"ngIf\"], [\"ngFor\", \"\", 3, \"ngForOf\", \"ngForTrackBy\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"cdkVirtualFor\", \"\", 3, \"cdkVirtualForOf\", \"cdkVirtualForTrackBy\", \"cdkVirtualForTemplateCacheSize\"]],\n  template: function TTBody_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, TTBody_ng_container_0_Template, 2, 2, \"ng-container\", 0);\n      i0.ɵɵtemplate(1, TTBody_ng_container_1_Template, 2, 3, \"ng-container\", 0);\n      i0.ɵɵtemplate(2, TTBody_ng_container_2_Template, 2, 5, \"ng-container\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.tt.virtualScroll);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.tt.virtualScroll);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.tt.isEmpty());\n    }\n  },\n  directives: [i3.NgIf, i3.NgForOf, i3.NgTemplateOutlet, i4.CdkVirtualForOf],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTBody, [{\n    type: Component,\n    args: [{\n      selector: '[pTreeTableBody]',\n      template: `\n        <ng-container *ngIf=\"!tt.virtualScroll\">\n            <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\n                <ng-container *ngIf=\"serializedNode.visible\">\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"tt.virtualScroll\">\n            <ng-template cdkVirtualFor let-serializedNode let-rowIndex=\"index\" [cdkVirtualForOf]=\"tt.serializedValue\" [cdkVirtualForTrackBy]=\"tt.rowTrackBy\" [cdkVirtualForTemplateCacheSize]=\"0\">\n                <ng-container *ngIf=\"serializedNode.visible\">\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"tt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: {$implicit: columns, frozen: frozen}\"></ng-container>\n        </ng-container>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        'class': 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    columns: [{\n      type: Input,\n      args: [\"pTreeTableBody\"]\n    }],\n    template: [{\n      type: Input,\n      args: [\"pTreeTableBodyTemplate\"]\n    }],\n    frozen: [{\n      type: Input\n    }]\n  });\n})();\n\nclass TTScrollableView {\n  constructor(tt, el, zone) {\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n\n  get scrollHeight() {\n    return this._scrollHeight;\n  }\n\n  set scrollHeight(val) {\n    this._scrollHeight = val;\n\n    if (val != null && (val.includes('%') || val.includes('calc'))) {\n      console.log('Percentage scroll height calculation is removed in favor of the more performant CSS based flex mode, use scrollHeight=\"flex\" instead.');\n    }\n\n    if (this.tt.virtualScroll && this.virtualScrollBody) {\n      this.virtualScrollBody.ngOnInit();\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this.frozen) {\n      if (this.tt.frozenColumns || this.tt.frozenBodyTemplate) {\n        DomHandler.addClass(this.el.nativeElement, 'p-treetable-unfrozen-view');\n      }\n\n      let frozenView = this.el.nativeElement.previousElementSibling;\n\n      if (frozenView) {\n        if (this.tt.virtualScroll) this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-virtual-scrollable-body');else this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-scrollable-body');\n      }\n\n      let scrollBarWidth = DomHandler.calculateScrollbarWidth();\n      this.scrollHeaderBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n\n      if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n        this.scrollFooterBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n      }\n    } else {\n      if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\n        this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\n      }\n    }\n\n    this.bindEvents();\n  }\n\n  bindEvents() {\n    this.zone.runOutsideAngular(() => {\n      if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n        this.headerScrollListener = this.onHeaderScroll.bind(this);\n        this.scrollHeaderBoxViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\n      }\n\n      if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n        this.footerScrollListener = this.onFooterScroll.bind(this);\n        this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\n      }\n\n      if (!this.frozen) {\n        this.bodyScrollListener = this.onBodyScroll.bind(this);\n        if (this.tt.virtualScroll) this.virtualScrollBody.getElementRef().nativeElement.addEventListener('scroll', this.bodyScrollListener);else this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n      }\n    });\n  }\n\n  unbindEvents() {\n    if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n      this.scrollHeaderBoxViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\n    }\n\n    if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n      this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\n    }\n\n    if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n      this.scrollBodyViewChild.nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n    }\n\n    if (this.virtualScrollBody && this.virtualScrollBody.getElementRef()) {\n      this.virtualScrollBody.getElementRef().nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n    }\n  }\n\n  onHeaderScroll() {\n    const scrollLeft = this.scrollHeaderViewChild.nativeElement.scrollLeft;\n    this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n    if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n      this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\n    }\n\n    this.preventBodyScrollPropagation = true;\n  }\n\n  onFooterScroll() {\n    const scrollLeft = this.scrollFooterViewChild.nativeElement.scrollLeft;\n    this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n    if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n      this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\n    }\n\n    this.preventBodyScrollPropagation = true;\n  }\n\n  onBodyScroll(event) {\n    if (this.preventBodyScrollPropagation) {\n      this.preventBodyScrollPropagation = false;\n      return;\n    }\n\n    if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n      this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n    }\n\n    if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n      this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n    }\n\n    if (this.frozenSiblingBody) {\n      this.frozenSiblingBody.scrollTop = event.target.scrollTop;\n    }\n  }\n\n  scrollToVirtualIndex(index) {\n    if (this.virtualScrollBody) {\n      this.virtualScrollBody.scrollToIndex(index);\n    }\n  }\n\n  scrollTo(options) {\n    if (this.virtualScrollBody) {\n      this.virtualScrollBody.scrollTo(options);\n    } else {\n      if (this.scrollBodyViewChild.nativeElement.scrollTo) {\n        this.scrollBodyViewChild.nativeElement.scrollTo(options);\n      } else {\n        this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;\n        this.scrollBodyViewChild.nativeElement.scrollTop = options.top;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.unbindEvents();\n    this.frozenSiblingBody = null;\n  }\n\n}\n\nTTScrollableView.ɵfac = function TTScrollableView_Factory(t) {\n  return new (t || TTScrollableView)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nTTScrollableView.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TTScrollableView,\n  selectors: [[\"\", \"ttScrollableView\", \"\"]],\n  viewQuery: function TTScrollableView_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c14, 5);\n      i0.ɵɵviewQuery(_c15, 5);\n      i0.ɵɵviewQuery(_c16, 5);\n      i0.ɵɵviewQuery(_c17, 5);\n      i0.ɵɵviewQuery(_c18, 5);\n      i0.ɵɵviewQuery(_c19, 5);\n      i0.ɵɵviewQuery(_c20, 5);\n      i0.ɵɵviewQuery(_c21, 5);\n      i0.ɵɵviewQuery(CdkVirtualScrollViewport, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollHeaderViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollHeaderBoxViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollBodyViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollTableViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollLoadingTableViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollFooterViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollFooterBoxViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollableAlignerViewChild = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.virtualScrollBody = _t.first);\n    }\n  },\n  hostAttrs: [1, \"p-element\"],\n  inputs: {\n    columns: [\"ttScrollableView\", \"columns\"],\n    frozen: \"frozen\",\n    scrollHeight: \"scrollHeight\"\n  },\n  attrs: _c22,\n  decls: 12,\n  vars: 13,\n  consts: [[1, \"p-treetable-scrollable-header\"], [\"scrollHeader\", \"\"], [1, \"p-treetable-scrollable-header-box\"], [\"scrollHeaderBox\", \"\"], [1, \"p-treetable-scrollable-header-table\", 3, \"ngClass\", \"ngStyle\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"p-treetable-thead\"], [4, \"ngIf\", \"ngIfElse\"], [\"virtualScrollTemplate\", \"\"], [\"class\", \"p-treetable-scrollable-footer\", 4, \"ngIf\"], [1, \"p-treetable-scrollable-body\", 3, \"ngStyle\"], [\"scrollBody\", \"\"], [3, \"ngStyle\"], [\"scrollTable\", \"\"], [1, \"p-treetable-tbody\", 3, \"pTreeTableBody\", \"pTreeTableBodyTemplate\", \"frozen\"], [\"style\", \"background-color:transparent\", 4, \"ngIf\"], [2, \"background-color\", \"transparent\"], [\"scrollableAligner\", \"\"], [1, \"p-treetable-virtual-scrollable-body\", 3, \"itemSize\", \"minBufferPx\", \"maxBufferPx\"], [1, \"p-treetable-scrollable-footer\"], [\"scrollFooter\", \"\"], [1, \"p-treetable-scrollable-footer-box\"], [\"scrollFooterBox\", \"\"], [1, \"p-treetable-scrollable-footer-table\", 3, \"ngClass\", \"ngStyle\"], [1, \"p-treetable-tfoot\"]],\n  template: function TTScrollableView_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵelementStart(2, \"div\", 2, 3);\n      i0.ɵɵelementStart(4, \"table\", 4);\n      i0.ɵɵtemplate(5, TTScrollableView_ng_container_5_Template, 1, 0, \"ng-container\", 5);\n      i0.ɵɵelementStart(6, \"thead\", 6);\n      i0.ɵɵtemplate(7, TTScrollableView_ng_container_7_Template, 1, 0, \"ng-container\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, TTScrollableView_ng_container_8_Template, 8, 15, \"ng-container\", 7);\n      i0.ɵɵtemplate(9, TTScrollableView_ng_template_9_Template, 6, 16, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtemplate(11, TTScrollableView_div_11_Template, 8, 10, \"div\", 9);\n    }\n\n    if (rf & 2) {\n      const _r5 = i0.ɵɵreference(10);\n\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngClass\", ctx.tt.tableStyleClass)(\"ngStyle\", ctx.tt.tableStyle);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.frozen ? ctx.tt.frozenColGroupTemplate || ctx.tt.colGroupTemplate : ctx.tt.colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(9, _c7, ctx.columns));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.frozen ? ctx.tt.frozenHeaderTemplate || ctx.tt.headerTemplate : ctx.tt.headerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(11, _c7, ctx.columns));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tt.virtualScroll)(\"ngIfElse\", _r5);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.tt.footerTemplate);\n    }\n  },\n  directives: [TTBody, i4.CdkVirtualScrollViewport, i3.NgClass, i3.NgStyle, i3.NgTemplateOutlet, i3.NgIf, i4.CdkFixedSizeVirtualScroll],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTScrollableView, [{\n    type: Component,\n    args: [{\n      selector: '[ttScrollableView]',\n      template: `\n        <div #scrollHeader class=\"p-treetable-scrollable-header\">\n            <div #scrollHeaderBox class=\"p-treetable-scrollable-header-box\">\n                <table class=\"p-treetable-scrollable-header-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate||tt.headerTemplate : tt.headerTemplate; context {$implicit: columns}\"></ng-container>\n                    </thead>\n                </table>\n            </div>\n        </div>\n        <ng-container *ngIf=\"!tt.virtualScroll; else virtualScrollTemplate\">\n            <div #scrollBody class=\"p-treetable-scrollable-body\" [ngStyle]=\"{'max-height': tt.scrollHeight !== 'flex' ? scrollHeight : undefined, 'overflow-y': !frozen && tt.scrollHeight ? 'scroll' : undefined}\">\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </div>\n        </ng-container>\n        <ng-template #virtualScrollTemplate>\n            <cdk-virtual-scroll-viewport [itemSize]=\"tt.virtualRowHeight\" [style.height]=\"tt.scrollHeight !== 'flex' ? scrollHeight : undefined\"\n                    [minBufferPx]=\"tt.minBufferPx\" [maxBufferPx]=\"tt.maxBufferPx\" class=\"p-treetable-virtual-scrollable-body\">\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </cdk-virtual-scroll-viewport>\n        </ng-template>\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"p-treetable-scrollable-footer\">\n            <div #scrollFooterBox class=\"p-treetable-scrollable-footer-box\">\n                <table class=\"p-treetable-scrollable-footer-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate||tt.footerTemplate : tt.footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        'class': 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    columns: [{\n      type: Input,\n      args: [\"ttScrollableView\"]\n    }],\n    frozen: [{\n      type: Input\n    }],\n    scrollHeaderViewChild: [{\n      type: ViewChild,\n      args: ['scrollHeader']\n    }],\n    scrollHeaderBoxViewChild: [{\n      type: ViewChild,\n      args: ['scrollHeaderBox']\n    }],\n    scrollBodyViewChild: [{\n      type: ViewChild,\n      args: ['scrollBody']\n    }],\n    scrollTableViewChild: [{\n      type: ViewChild,\n      args: ['scrollTable']\n    }],\n    scrollLoadingTableViewChild: [{\n      type: ViewChild,\n      args: ['loadingTable']\n    }],\n    scrollFooterViewChild: [{\n      type: ViewChild,\n      args: ['scrollFooter']\n    }],\n    scrollFooterBoxViewChild: [{\n      type: ViewChild,\n      args: ['scrollFooterBox']\n    }],\n    scrollableAlignerViewChild: [{\n      type: ViewChild,\n      args: ['scrollableAligner']\n    }],\n    virtualScrollBody: [{\n      type: ViewChild,\n      args: [CdkVirtualScrollViewport]\n    }],\n    scrollHeight: [{\n      type: Input\n    }]\n  });\n})();\n\nclass TTSortableColumn {\n  constructor(tt) {\n    this.tt = tt;\n\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n        this.updateSortState();\n      });\n    }\n  }\n\n  ngOnInit() {\n    if (this.isEnabled()) {\n      this.updateSortState();\n    }\n  }\n\n  updateSortState() {\n    this.sorted = this.tt.isSorted(this.field);\n  }\n\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.updateSortState();\n      this.tt.sort({\n        originalEvent: event,\n        field: this.field\n      });\n      DomHandler.clearSelection();\n    }\n  }\n\n  onEnterKey(event) {\n    this.onClick(event);\n  }\n\n  isEnabled() {\n    return this.ttSortableColumnDisabled !== true;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n}\n\nTTSortableColumn.ɵfac = function TTSortableColumn_Factory(t) {\n  return new (t || TTSortableColumn)(i0.ɵɵdirectiveInject(TreeTable));\n};\n\nTTSortableColumn.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTSortableColumn,\n  selectors: [[\"\", \"ttSortableColumn\", \"\"]],\n  hostAttrs: [1, \"p-element\"],\n  hostVars: 6,\n  hostBindings: function TTSortableColumn_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function TTSortableColumn_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      })(\"keydown.enter\", function TTSortableColumn_keydown_enter_HostBindingHandler($event) {\n        return ctx.onEnterKey($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"tabindex\", ctx.isEnabled() ? \"0\" : null)(\"role\", \"columnheader\");\n      i0.ɵɵclassProp(\"p-sortable-column\", ctx.isEnabled())(\"p-highlight\", ctx.sorted);\n    }\n  },\n  inputs: {\n    field: [\"ttSortableColumn\", \"field\"],\n    ttSortableColumnDisabled: \"ttSortableColumnDisabled\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTSortableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttSortableColumn]',\n      host: {\n        'class': 'p-element',\n        '[class.p-sortable-column]': 'isEnabled()',\n        '[class.p-highlight]': 'sorted',\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n        '[attr.role]': '\"columnheader\"'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }];\n  }, {\n    field: [{\n      type: Input,\n      args: [\"ttSortableColumn\"]\n    }],\n    ttSortableColumnDisabled: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onEnterKey: [{\n      type: HostListener,\n      args: ['keydown.enter', ['$event']]\n    }]\n  });\n})();\n\nclass TTSortIcon {\n  constructor(tt, cd) {\n    this.tt = tt;\n    this.cd = cd;\n    this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n      this.updateSortState();\n      this.cd.markForCheck();\n    });\n  }\n\n  ngOnInit() {\n    this.updateSortState();\n  }\n\n  onClick(event) {\n    event.preventDefault();\n  }\n\n  updateSortState() {\n    if (this.tt.sortMode === 'single') {\n      this.sortOrder = this.tt.isSorted(this.field) ? this.tt.sortOrder : 0;\n    } else if (this.tt.sortMode === 'multiple') {\n      let sortMeta = this.tt.getSortMeta(this.field);\n      this.sortOrder = sortMeta ? sortMeta.order : 0;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n}\n\nTTSortIcon.ɵfac = function TTSortIcon_Factory(t) {\n  return new (t || TTSortIcon)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nTTSortIcon.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TTSortIcon,\n  selectors: [[\"p-treeTableSortIcon\"]],\n  hostAttrs: [1, \"p-element\"],\n  inputs: {\n    field: \"field\",\n    ariaLabelDesc: \"ariaLabelDesc\",\n    ariaLabelAsc: \"ariaLabelAsc\"\n  },\n  decls: 1,\n  vars: 5,\n  consts: [[1, \"p-sortable-column-icon\", \"pi\", \"pi-fw\", 3, \"ngClass\"]],\n  template: function TTSortIcon_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"i\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(1, _c24, ctx.sortOrder === 1, ctx.sortOrder === -1, ctx.sortOrder === 0));\n    }\n  },\n  directives: [i3.NgClass],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTSortIcon, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableSortIcon',\n      template: `\n        <i class=\"p-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-amount-up-alt': sortOrder === 1, 'pi-sort-amount-down': sortOrder === -1, 'pi-sort-alt': sortOrder === 0}\"></i>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'class': 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    field: [{\n      type: Input\n    }],\n    ariaLabelDesc: [{\n      type: Input\n    }],\n    ariaLabelAsc: [{\n      type: Input\n    }]\n  });\n})();\n\nclass TTResizableColumn {\n  constructor(tt, el, zone) {\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n\n  ngAfterViewInit() {\n    if (this.isEnabled()) {\n      DomHandler.addClass(this.el.nativeElement, 'p-resizable-column');\n      this.resizer = document.createElement('span');\n      this.resizer.className = 'p-column-resizer';\n      this.el.nativeElement.appendChild(this.resizer);\n      this.zone.runOutsideAngular(() => {\n        this.resizerMouseDownListener = this.onMouseDown.bind(this);\n        this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\n      });\n    }\n  }\n\n  bindDocumentEvents() {\n    this.zone.runOutsideAngular(() => {\n      this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\n      document.addEventListener('mousemove', this.documentMouseMoveListener);\n      this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\n      document.addEventListener('mouseup', this.documentMouseUpListener);\n    });\n  }\n\n  unbindDocumentEvents() {\n    if (this.documentMouseMoveListener) {\n      document.removeEventListener('mousemove', this.documentMouseMoveListener);\n      this.documentMouseMoveListener = null;\n    }\n\n    if (this.documentMouseUpListener) {\n      document.removeEventListener('mouseup', this.documentMouseUpListener);\n      this.documentMouseUpListener = null;\n    }\n  }\n\n  onMouseDown(event) {\n    this.tt.onColumnResizeBegin(event);\n    this.bindDocumentEvents();\n  }\n\n  onDocumentMouseMove(event) {\n    this.tt.onColumnResize(event);\n  }\n\n  onDocumentMouseUp(event) {\n    this.tt.onColumnResizeEnd(event, this.el.nativeElement);\n    this.unbindDocumentEvents();\n  }\n\n  isEnabled() {\n    return this.ttResizableColumnDisabled !== true;\n  }\n\n  ngOnDestroy() {\n    if (this.resizerMouseDownListener) {\n      this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n    }\n\n    this.unbindDocumentEvents();\n  }\n\n}\n\nTTResizableColumn.ɵfac = function TTResizableColumn_Factory(t) {\n  return new (t || TTResizableColumn)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nTTResizableColumn.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTResizableColumn,\n  selectors: [[\"\", \"ttResizableColumn\", \"\"]],\n  hostAttrs: [1, \"p-element\"],\n  inputs: {\n    ttResizableColumnDisabled: \"ttResizableColumnDisabled\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTResizableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttResizableColumn]',\n      host: {\n        'class': 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    ttResizableColumnDisabled: [{\n      type: Input\n    }]\n  });\n})();\n\nclass TTReorderableColumn {\n  constructor(tt, el, zone) {\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n\n  ngAfterViewInit() {\n    if (this.isEnabled()) {\n      this.bindEvents();\n    }\n  }\n\n  bindEvents() {\n    this.zone.runOutsideAngular(() => {\n      this.mouseDownListener = this.onMouseDown.bind(this);\n      this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n      this.dragStartListener = this.onDragStart.bind(this);\n      this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n      this.dragOverListener = this.onDragEnter.bind(this);\n      this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n      this.dragEnterListener = this.onDragEnter.bind(this);\n      this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\n      this.dragLeaveListener = this.onDragLeave.bind(this);\n      this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n    });\n  }\n\n  unbindEvents() {\n    if (this.mouseDownListener) {\n      document.removeEventListener('mousedown', this.mouseDownListener);\n      this.mouseDownListener = null;\n    }\n\n    if (this.dragOverListener) {\n      document.removeEventListener('dragover', this.dragOverListener);\n      this.dragOverListener = null;\n    }\n\n    if (this.dragEnterListener) {\n      document.removeEventListener('dragenter', this.dragEnterListener);\n      this.dragEnterListener = null;\n    }\n\n    if (this.dragEnterListener) {\n      document.removeEventListener('dragenter', this.dragEnterListener);\n      this.dragEnterListener = null;\n    }\n\n    if (this.dragLeaveListener) {\n      document.removeEventListener('dragleave', this.dragLeaveListener);\n      this.dragLeaveListener = null;\n    }\n  }\n\n  onMouseDown(event) {\n    if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'p-column-resizer')) this.el.nativeElement.draggable = false;else this.el.nativeElement.draggable = true;\n  }\n\n  onDragStart(event) {\n    this.tt.onColumnDragStart(event, this.el.nativeElement);\n  }\n\n  onDragOver(event) {\n    event.preventDefault();\n  }\n\n  onDragEnter(event) {\n    this.tt.onColumnDragEnter(event, this.el.nativeElement);\n  }\n\n  onDragLeave(event) {\n    this.tt.onColumnDragLeave(event);\n  }\n\n  onDrop(event) {\n    if (this.isEnabled()) {\n      this.tt.onColumnDrop(event, this.el.nativeElement);\n    }\n  }\n\n  isEnabled() {\n    return this.ttReorderableColumnDisabled !== true;\n  }\n\n  ngOnDestroy() {\n    this.unbindEvents();\n  }\n\n}\n\nTTReorderableColumn.ɵfac = function TTReorderableColumn_Factory(t) {\n  return new (t || TTReorderableColumn)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nTTReorderableColumn.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTReorderableColumn,\n  selectors: [[\"\", \"ttReorderableColumn\", \"\"]],\n  hostAttrs: [1, \"p-element\"],\n  hostBindings: function TTReorderableColumn_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"drop\", function TTReorderableColumn_drop_HostBindingHandler($event) {\n        return ctx.onDrop($event);\n      });\n    }\n  },\n  inputs: {\n    ttReorderableColumnDisabled: \"ttReorderableColumnDisabled\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTReorderableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttReorderableColumn]',\n      host: {\n        'class': 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    ttReorderableColumnDisabled: [{\n      type: Input\n    }],\n    onDrop: [{\n      type: HostListener,\n      args: ['drop', ['$event']]\n    }]\n  });\n})();\n\nclass TTSelectableRow {\n  constructor(tt, tableService) {\n    this.tt = tt;\n    this.tableService = tableService;\n\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n        this.selected = this.tt.isSelected(this.rowNode.node);\n      });\n    }\n  }\n\n  ngOnInit() {\n    if (this.isEnabled()) {\n      this.selected = this.tt.isSelected(this.rowNode.node);\n    }\n  }\n\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.tt.handleRowClick({\n        originalEvent: event,\n        rowNode: this.rowNode\n      });\n    }\n  }\n\n  onEnterKey(event) {\n    if (event.which === 13) {\n      this.onClick(event);\n    }\n  }\n\n  onTouchEnd(event) {\n    if (this.isEnabled()) {\n      this.tt.handleRowTouchEnd(event);\n    }\n  }\n\n  isEnabled() {\n    return this.ttSelectableRowDisabled !== true;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n}\n\nTTSelectableRow.ɵfac = function TTSelectableRow_Factory(t) {\n  return new (t || TTSelectableRow)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService));\n};\n\nTTSelectableRow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTSelectableRow,\n  selectors: [[\"\", \"ttSelectableRow\", \"\"]],\n  hostAttrs: [1, \"p-element\"],\n  hostVars: 2,\n  hostBindings: function TTSelectableRow_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function TTSelectableRow_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      })(\"keydown\", function TTSelectableRow_keydown_HostBindingHandler($event) {\n        return ctx.onEnterKey($event);\n      })(\"touchend\", function TTSelectableRow_touchend_HostBindingHandler($event) {\n        return ctx.onTouchEnd($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"p-highlight\", ctx.selected);\n    }\n  },\n  inputs: {\n    rowNode: [\"ttSelectableRow\", \"rowNode\"],\n    ttSelectableRowDisabled: \"ttSelectableRowDisabled\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTSelectableRow, [{\n    type: Directive,\n    args: [{\n      selector: '[ttSelectableRow]',\n      host: {\n        'class': 'p-element',\n        '[class.p-highlight]': 'selected'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }];\n  }, {\n    rowNode: [{\n      type: Input,\n      args: [\"ttSelectableRow\"]\n    }],\n    ttSelectableRowDisabled: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onEnterKey: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }],\n    onTouchEnd: [{\n      type: HostListener,\n      args: ['touchend', ['$event']]\n    }]\n  });\n})();\n\nclass TTSelectableRowDblClick {\n  constructor(tt, tableService) {\n    this.tt = tt;\n    this.tableService = tableService;\n\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n        this.selected = this.tt.isSelected(this.rowNode.node);\n      });\n    }\n  }\n\n  ngOnInit() {\n    if (this.isEnabled()) {\n      this.selected = this.tt.isSelected(this.rowNode.node);\n    }\n  }\n\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.tt.handleRowClick({\n        originalEvent: event,\n        rowNode: this.rowNode\n      });\n    }\n  }\n\n  isEnabled() {\n    return this.ttSelectableRowDisabled !== true;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n}\n\nTTSelectableRowDblClick.ɵfac = function TTSelectableRowDblClick_Factory(t) {\n  return new (t || TTSelectableRowDblClick)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService));\n};\n\nTTSelectableRowDblClick.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTSelectableRowDblClick,\n  selectors: [[\"\", \"ttSelectableRowDblClick\", \"\"]],\n  hostAttrs: [1, \"p-element\"],\n  hostVars: 2,\n  hostBindings: function TTSelectableRowDblClick_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"dblclick\", function TTSelectableRowDblClick_dblclick_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"p-highlight\", ctx.selected);\n    }\n  },\n  inputs: {\n    rowNode: [\"ttSelectableRowDblClick\", \"rowNode\"],\n    ttSelectableRowDisabled: \"ttSelectableRowDisabled\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTSelectableRowDblClick, [{\n    type: Directive,\n    args: [{\n      selector: '[ttSelectableRowDblClick]',\n      host: {\n        'class': 'p-element',\n        '[class.p-highlight]': 'selected'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }];\n  }, {\n    rowNode: [{\n      type: Input,\n      args: [\"ttSelectableRowDblClick\"]\n    }],\n    ttSelectableRowDisabled: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['dblclick', ['$event']]\n    }]\n  });\n})();\n\nclass TTContextMenuRow {\n  constructor(tt, tableService, el) {\n    this.tt = tt;\n    this.tableService = tableService;\n    this.el = el;\n\n    if (this.isEnabled()) {\n      this.subscription = this.tt.tableService.contextMenuSource$.subscribe(node => {\n        this.selected = this.tt.equals(this.rowNode.node, node);\n      });\n    }\n  }\n\n  onContextMenu(event) {\n    if (this.isEnabled()) {\n      this.tt.handleRowRightClick({\n        originalEvent: event,\n        rowNode: this.rowNode\n      });\n      this.el.nativeElement.focus();\n      event.preventDefault();\n    }\n  }\n\n  isEnabled() {\n    return this.ttContextMenuRowDisabled !== true;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n}\n\nTTContextMenuRow.ɵfac = function TTContextMenuRow_Factory(t) {\n  return new (t || TTContextMenuRow)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nTTContextMenuRow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTContextMenuRow,\n  selectors: [[\"\", \"ttContextMenuRow\", \"\"]],\n  hostAttrs: [1, \"p-element\"],\n  hostVars: 3,\n  hostBindings: function TTContextMenuRow_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"contextmenu\", function TTContextMenuRow_contextmenu_HostBindingHandler($event) {\n        return ctx.onContextMenu($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"tabindex\", ctx.isEnabled() ? 0 : undefined);\n      i0.ɵɵclassProp(\"p-highlight-contextmenu\", ctx.selected);\n    }\n  },\n  inputs: {\n    rowNode: [\"ttContextMenuRow\", \"rowNode\"],\n    ttContextMenuRowDisabled: \"ttContextMenuRowDisabled\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTContextMenuRow, [{\n    type: Directive,\n    args: [{\n      selector: '[ttContextMenuRow]',\n      host: {\n        'class': 'p-element',\n        '[class.p-highlight-contextmenu]': 'selected',\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    rowNode: [{\n      type: Input,\n      args: [\"ttContextMenuRow\"]\n    }],\n    ttContextMenuRowDisabled: [{\n      type: Input\n    }],\n    onContextMenu: [{\n      type: HostListener,\n      args: ['contextmenu', ['$event']]\n    }]\n  });\n})();\n\nclass TTCheckbox {\n  constructor(tt, tableService, cd) {\n    this.tt = tt;\n    this.tableService = tableService;\n    this.cd = cd;\n    this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n      this.checked = this.tt.isSelected(this.rowNode.node);\n      this.cd.markForCheck();\n    });\n  }\n\n  ngOnInit() {\n    this.checked = this.tt.isSelected(this.rowNode.node);\n  }\n\n  onClick(event) {\n    if (!this.disabled) {\n      this.tt.toggleNodeWithCheckbox({\n        originalEvent: event,\n        rowNode: this.rowNode\n      });\n    }\n\n    DomHandler.clearSelection();\n  }\n\n  onFocus() {\n    this.focused = true;\n  }\n\n  onBlur() {\n    this.focused = false;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n}\n\nTTCheckbox.ɵfac = function TTCheckbox_Factory(t) {\n  return new (t || TTCheckbox)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nTTCheckbox.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TTCheckbox,\n  selectors: [[\"p-treeTableCheckbox\"]],\n  hostAttrs: [1, \"p-element\"],\n  inputs: {\n    disabled: \"disabled\",\n    rowNode: [\"value\", \"rowNode\"]\n  },\n  decls: 6,\n  vars: 15,\n  consts: [[1, \"p-checkbox\", \"p-component\", 3, \"ngClass\", \"click\"], [1, \"p-hidden-accessible\"], [\"type\", \"checkbox\", 3, \"checked\", \"focus\", \"blur\"], [\"role\", \"checkbox\", 3, \"ngClass\"], [\"box\", \"\"], [1, \"p-checkbox-icon\", \"pi\", 3, \"ngClass\"]],\n  template: function TTCheckbox_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵlistener(\"click\", function TTCheckbox_Template_div_click_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"input\", 2);\n      i0.ɵɵlistener(\"focus\", function TTCheckbox_Template_input_focus_2_listener() {\n        return ctx.onFocus();\n      })(\"blur\", function TTCheckbox_Template_input_blur_2_listener() {\n        return ctx.onBlur();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 3, 4);\n      i0.ɵɵelement(5, \"span\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c25, ctx.focused));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"checked\", ctx.checked);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction4(7, _c26, ctx.checked, ctx.focused, ctx.rowNode.node.partialSelected, ctx.disabled));\n      i0.ɵɵattribute(\"aria-checked\", ctx.checked);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(12, _c27, ctx.checked, ctx.rowNode.node.partialSelected));\n    }\n  },\n  directives: [i3.NgClass],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableCheckbox',\n      template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{'p-checkbox-focused':focused}\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n            </div>\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\n                'p-highlight':checked, 'p-focus':focused, 'p-indeterminate': rowNode.node.partialSelected, 'p-disabled':disabled}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon pi\" [ngClass]=\"{'pi-check':checked, 'pi-minus': rowNode.node.partialSelected}\"></span>\n            </div>\n        </div>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'class': 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    disabled: [{\n      type: Input\n    }],\n    rowNode: [{\n      type: Input,\n      args: [\"value\"]\n    }]\n  });\n})();\n\nclass TTHeaderCheckbox {\n  constructor(tt, tableService, cd) {\n    this.tt = tt;\n    this.tableService = tableService;\n    this.cd = cd;\n    this.valueChangeSubscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n      this.checked = this.updateCheckedState();\n    });\n    this.selectionChangeSubscription = this.tt.tableService.selectionSource$.subscribe(() => {\n      this.checked = this.updateCheckedState();\n    });\n  }\n\n  ngOnInit() {\n    this.checked = this.updateCheckedState();\n  }\n\n  onClick(event, checked) {\n    if (this.tt.value && this.tt.value.length > 0) {\n      this.tt.toggleNodesWithCheckbox(event, !checked);\n    }\n\n    DomHandler.clearSelection();\n  }\n\n  onFocus() {\n    this.focused = true;\n  }\n\n  onBlur() {\n    this.focused = false;\n  }\n\n  ngOnDestroy() {\n    if (this.selectionChangeSubscription) {\n      this.selectionChangeSubscription.unsubscribe();\n    }\n\n    if (this.valueChangeSubscription) {\n      this.valueChangeSubscription.unsubscribe();\n    }\n  }\n\n  updateCheckedState() {\n    this.cd.markForCheck();\n    let checked;\n    const data = this.tt.filteredNodes || this.tt.value;\n\n    if (data) {\n      for (let node of data) {\n        if (this.tt.isSelected(node)) {\n          checked = true;\n        } else {\n          checked = false;\n          break;\n        }\n      }\n    } else {\n      checked = false;\n    }\n\n    return checked;\n  }\n\n}\n\nTTHeaderCheckbox.ɵfac = function TTHeaderCheckbox_Factory(t) {\n  return new (t || TTHeaderCheckbox)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TreeTableService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nTTHeaderCheckbox.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TTHeaderCheckbox,\n  selectors: [[\"p-treeTableHeaderCheckbox\"]],\n  viewQuery: function TTHeaderCheckbox_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c28, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.boxViewChild = _t.first);\n    }\n  },\n  hostAttrs: [1, \"p-element\"],\n  decls: 7,\n  vars: 14,\n  consts: [[1, \"p-checkbox\", \"p-component\", 3, \"ngClass\", \"click\"], [1, \"p-hidden-accessible\"], [\"type\", \"checkbox\", 3, \"checked\", \"disabled\", \"focus\", \"blur\"], [\"cb\", \"\"], [\"role\", \"checkbox\", 3, \"ngClass\"], [\"box\", \"\"], [1, \"p-checkbox-icon\", 3, \"ngClass\"]],\n  template: function TTHeaderCheckbox_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r2 = i0.ɵɵgetCurrentView();\n\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵlistener(\"click\", function TTHeaderCheckbox_Template_div_click_0_listener($event) {\n        i0.ɵɵrestoreView(_r2);\n\n        const _r0 = i0.ɵɵreference(3);\n\n        return ctx.onClick($event, _r0.checked);\n      });\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"input\", 2, 3);\n      i0.ɵɵlistener(\"focus\", function TTHeaderCheckbox_Template_input_focus_2_listener() {\n        return ctx.onFocus();\n      })(\"blur\", function TTHeaderCheckbox_Template_input_blur_2_listener() {\n        return ctx.onBlur();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 4, 5);\n      i0.ɵɵelement(6, \"span\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(6, _c25, ctx.focused));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"checked\", ctx.checked)(\"disabled\", !ctx.tt.value || ctx.tt.value.length === 0);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(8, _c29, ctx.checked, ctx.focused, !ctx.tt.value || ctx.tt.value.length === 0));\n      i0.ɵɵattribute(\"aria-checked\", ctx.checked);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(12, _c30, ctx.checked));\n    }\n  },\n  directives: [i3.NgClass],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTHeaderCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableHeaderCheckbox',\n      template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{'p-checkbox-focused':focused}\" (click)=\"onClick($event, cb.checked)\">\n            <div class=\"p-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value||tt.value.length === 0\">\n            </div>\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\n                'p-highlight':checked, 'p-focus':focused, 'p-disabled': (!tt.value || tt.value.length === 0)}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'class': 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TreeTableService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    boxViewChild: [{\n      type: ViewChild,\n      args: ['box']\n    }]\n  });\n})();\n\nclass TTEditableColumn {\n  constructor(tt, el, zone) {\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n\n  ngAfterViewInit() {\n    if (this.isEnabled()) {\n      DomHandler.addClass(this.el.nativeElement, 'p-editable-column');\n    }\n  }\n\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.tt.editingCellClick = true;\n\n      if (this.tt.editingCell) {\n        if (this.tt.editingCell !== this.el.nativeElement) {\n          if (!this.tt.isEditingCellValid()) {\n            return;\n          }\n\n          DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n          this.openCell();\n        }\n      } else {\n        this.openCell();\n      }\n    }\n  }\n\n  openCell() {\n    this.tt.updateEditingCell(this.el.nativeElement, this.data, this.field);\n    DomHandler.addClass(this.el.nativeElement, 'p-cell-editing');\n    this.tt.onEditInit.emit({\n      field: this.field,\n      data: this.data\n    });\n    this.tt.editingCellClick = true;\n    this.zone.runOutsideAngular(() => {\n      setTimeout(() => {\n        let focusable = DomHandler.findSingle(this.el.nativeElement, 'input, textarea');\n\n        if (focusable) {\n          focusable.focus();\n        }\n      }, 50);\n    });\n  }\n\n  closeEditingCell() {\n    DomHandler.removeClass(this.tt.editingCell, 'p-checkbox-icon');\n    this.tt.editingCell = null;\n    this.tt.unbindDocumentEditListener();\n  }\n\n  onKeyDown(event) {\n    if (this.isEnabled()) {\n      //enter\n      if (event.keyCode == 13) {\n        if (this.tt.isEditingCellValid()) {\n          DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n          this.closeEditingCell();\n          this.tt.onEditComplete.emit({\n            field: this.field,\n            data: this.data\n          });\n        }\n\n        event.preventDefault();\n      } //escape\n      else if (event.keyCode == 27) {\n        if (this.tt.isEditingCellValid()) {\n          DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n          this.closeEditingCell();\n          this.tt.onEditCancel.emit({\n            field: this.field,\n            data: this.data\n          });\n        }\n\n        event.preventDefault();\n      } //tab\n      else if (event.keyCode == 9) {\n        this.tt.onEditComplete.emit({\n          field: this.field,\n          data: this.data\n        });\n        if (event.shiftKey) this.moveToPreviousCell(event);else this.moveToNextCell(event);\n      }\n    }\n  }\n\n  findCell(element) {\n    if (element) {\n      let cell = element;\n\n      while (cell && !DomHandler.hasClass(cell, 'p-cell-editing')) {\n        cell = cell.parentElement;\n      }\n\n      return cell;\n    } else {\n      return null;\n    }\n  }\n\n  moveToPreviousCell(event) {\n    let currentCell = this.findCell(event.target);\n    let row = currentCell.parentElement;\n    let targetCell = this.findPreviousEditableColumn(currentCell);\n\n    if (targetCell) {\n      DomHandler.invokeElementMethod(targetCell, 'click');\n      event.preventDefault();\n    }\n  }\n\n  moveToNextCell(event) {\n    let currentCell = this.findCell(event.target);\n    let row = currentCell.parentElement;\n    let targetCell = this.findNextEditableColumn(currentCell);\n\n    if (targetCell) {\n      DomHandler.invokeElementMethod(targetCell, 'click');\n      event.preventDefault();\n    }\n  }\n\n  findPreviousEditableColumn(cell) {\n    let prevCell = cell.previousElementSibling;\n\n    if (!prevCell) {\n      let previousRow = cell.parentElement ? cell.parentElement.previousElementSibling : null;\n\n      if (previousRow) {\n        prevCell = previousRow.lastElementChild;\n      }\n    }\n\n    if (prevCell) {\n      if (DomHandler.hasClass(prevCell, 'p-editable-column')) return prevCell;else return this.findPreviousEditableColumn(prevCell);\n    } else {\n      return null;\n    }\n  }\n\n  findNextEditableColumn(cell) {\n    let nextCell = cell.nextElementSibling;\n\n    if (!nextCell) {\n      let nextRow = cell.parentElement ? cell.parentElement.nextElementSibling : null;\n\n      if (nextRow) {\n        nextCell = nextRow.firstElementChild;\n      }\n    }\n\n    if (nextCell) {\n      if (DomHandler.hasClass(nextCell, 'p-editable-column')) return nextCell;else return this.findNextEditableColumn(nextCell);\n    } else {\n      return null;\n    }\n  }\n\n  isEnabled() {\n    return this.ttEditableColumnDisabled !== true;\n  }\n\n}\n\nTTEditableColumn.ɵfac = function TTEditableColumn_Factory(t) {\n  return new (t || TTEditableColumn)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nTTEditableColumn.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTEditableColumn,\n  selectors: [[\"\", \"ttEditableColumn\", \"\"]],\n  hostAttrs: [1, \"p-element\"],\n  hostBindings: function TTEditableColumn_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function TTEditableColumn_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      })(\"keydown\", function TTEditableColumn_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      });\n    }\n  },\n  inputs: {\n    data: [\"ttEditableColumn\", \"data\"],\n    field: [\"ttEditableColumnField\", \"field\"],\n    ttEditableColumnDisabled: \"ttEditableColumnDisabled\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTEditableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[ttEditableColumn]',\n      host: {\n        'class': 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    data: [{\n      type: Input,\n      args: [\"ttEditableColumn\"]\n    }],\n    field: [{\n      type: Input,\n      args: [\"ttEditableColumnField\"]\n    }],\n    ttEditableColumnDisabled: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\n\nclass TreeTableCellEditor {\n  constructor(tt, editableColumn) {\n    this.tt = tt;\n    this.editableColumn = editableColumn;\n  }\n\n  ngAfterContentInit() {\n    this.templates.forEach(item => {\n      switch (item.getType()) {\n        case 'input':\n          this.inputTemplate = item.template;\n          break;\n\n        case 'output':\n          this.outputTemplate = item.template;\n          break;\n      }\n    });\n  }\n\n}\n\nTreeTableCellEditor.ɵfac = function TreeTableCellEditor_Factory(t) {\n  return new (t || TreeTableCellEditor)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(TTEditableColumn));\n};\n\nTreeTableCellEditor.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeTableCellEditor,\n  selectors: [[\"p-treeTableCellEditor\"]],\n  contentQueries: function TreeTableCellEditor_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n    }\n  },\n  hostAttrs: [1, \"p-element\"],\n  decls: 2,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [4, \"ngTemplateOutlet\"]],\n  template: function TreeTableCellEditor_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, TreeTableCellEditor_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n      i0.ɵɵtemplate(1, TreeTableCellEditor_ng_container_1_Template, 2, 1, \"ng-container\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.tt.editingCell === ctx.editableColumn.el.nativeElement);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tt.editingCell || ctx.tt.editingCell !== ctx.editableColumn.el.nativeElement);\n    }\n  },\n  directives: [i3.NgIf, i3.NgTemplateOutlet],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTableCellEditor, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableCellEditor',\n      template: `\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        'class': 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: TTEditableColumn\n    }];\n  }, {\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }]\n  });\n})();\n\nclass TTRow {\n  constructor(tt, el, zone) {\n    this.tt = tt;\n    this.el = el;\n    this.zone = zone;\n  }\n\n  onKeyDown(event) {\n    switch (event.which) {\n      //down arrow\n      case 40:\n        let nextRow = this.el.nativeElement.nextElementSibling;\n\n        if (nextRow) {\n          nextRow.focus();\n        }\n\n        event.preventDefault();\n        break;\n      //down arrow\n\n      case 38:\n        let prevRow = this.el.nativeElement.previousElementSibling;\n\n        if (prevRow) {\n          prevRow.focus();\n        }\n\n        event.preventDefault();\n        break;\n      //left arrow\n\n      case 37:\n        if (this.rowNode.node.expanded) {\n          this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n          this.rowNode.node.expanded = false;\n          this.tt.onNodeCollapse.emit({\n            originalEvent: event,\n            node: this.rowNode.node\n          });\n          this.tt.updateSerializedValue();\n          this.tt.tableService.onUIUpdate(this.tt.value);\n          this.restoreFocus();\n        }\n\n        break;\n      //right arrow\n\n      case 39:\n        if (!this.rowNode.node.expanded) {\n          this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n          this.rowNode.node.expanded = true;\n          this.tt.onNodeExpand.emit({\n            originalEvent: event,\n            node: this.rowNode.node\n          });\n          this.tt.updateSerializedValue();\n          this.tt.tableService.onUIUpdate(this.tt.value);\n          this.restoreFocus();\n        }\n\n        break;\n    }\n  }\n\n  restoreFocus() {\n    this.zone.runOutsideAngular(() => {\n      setTimeout(() => {\n        let row = DomHandler.findSingle(this.tt.containerViewChild.nativeElement, '.p-treetable-tbody').children[this.tt.toggleRowIndex];\n\n        if (row) {\n          row.focus();\n        }\n      }, 25);\n    });\n  }\n\n}\n\nTTRow.ɵfac = function TTRow_Factory(t) {\n  return new (t || TTRow)(i0.ɵɵdirectiveInject(TreeTable), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nTTRow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TTRow,\n  selectors: [[\"\", \"ttRow\", \"\"]],\n  hostAttrs: [1, \"p-element\"],\n  hostVars: 1,\n  hostBindings: function TTRow_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function TTRow_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"tabindex\", \"0\");\n    }\n  },\n  inputs: {\n    rowNode: [\"ttRow\", \"rowNode\"]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TTRow, [{\n    type: Directive,\n    args: [{\n      selector: '[ttRow]',\n      host: {\n        'class': 'p-element',\n        '[attr.tabindex]': '\"0\"'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    rowNode: [{\n      type: Input,\n      args: ['ttRow']\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\n\nclass TreeTableToggler {\n  constructor(tt) {\n    this.tt = tt;\n  }\n\n  onClick(event) {\n    this.rowNode.node.expanded = !this.rowNode.node.expanded;\n\n    if (this.rowNode.node.expanded) {\n      this.tt.onNodeExpand.emit({\n        originalEvent: event,\n        node: this.rowNode.node\n      });\n    } else {\n      this.tt.onNodeCollapse.emit({\n        originalEvent: event,\n        node: this.rowNode.node\n      });\n    }\n\n    this.tt.updateSerializedValue();\n    this.tt.tableService.onUIUpdate(this.tt.value);\n    event.preventDefault();\n  }\n\n}\n\nTreeTableToggler.ɵfac = function TreeTableToggler_Factory(t) {\n  return new (t || TreeTableToggler)(i0.ɵɵdirectiveInject(TreeTable));\n};\n\nTreeTableToggler.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeTableToggler,\n  selectors: [[\"p-treeTableToggler\"]],\n  hostAttrs: [1, \"p-element\"],\n  inputs: {\n    rowNode: \"rowNode\"\n  },\n  decls: 2,\n  vars: 5,\n  consts: [[\"type\", \"button\", \"tabindex\", \"-1\", \"pRipple\", \"\", 1, \"p-treetable-toggler\", \"p-link\", 3, \"click\"], [3, \"ngClass\"]],\n  template: function TreeTableToggler_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function TreeTableToggler_Template_button_click_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵelement(1, \"i\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"visibility\", ctx.rowNode.node.leaf === false || ctx.rowNode.node.children && ctx.rowNode.node.children.length ? \"visible\" : \"hidden\")(\"margin-left\", ctx.rowNode.level * 16 + \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", ctx.rowNode.node.expanded ? \"pi pi-fw pi-chevron-down\" : \"pi pi-fw pi-chevron-right\");\n    }\n  },\n  directives: [i5.Ripple, i3.NgClass],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTableToggler, [{\n    type: Component,\n    args: [{\n      selector: 'p-treeTableToggler',\n      template: `\n        <button type=\"button\" class=\"p-treetable-toggler p-link\" (click)=\"onClick($event)\" tabindex=\"-1\" pRipple\n            [style.visibility]=\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\" [style.marginLeft]=\"rowNode.level * 16 + 'px'\">\n            <i [ngClass]=\"rowNode.node.expanded ? 'pi pi-fw pi-chevron-down' : 'pi pi-fw pi-chevron-right'\"></i>\n        </button>\n    `,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        'class': 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: TreeTable\n    }];\n  }, {\n    rowNode: [{\n      type: Input\n    }]\n  });\n})();\n\nclass TreeTableModule {}\n\nTreeTableModule.ɵfac = function TreeTableModule_Factory(t) {\n  return new (t || TreeTableModule)();\n};\n\nTreeTableModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TreeTableModule\n});\nTreeTableModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, PaginatorModule, ScrollingModule, RippleModule], SharedModule, ScrollingModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeTableModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, PaginatorModule, ScrollingModule, RippleModule],\n      exports: [TreeTable, SharedModule, TreeTableToggler, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor, ScrollingModule],\n      declarations: [TreeTable, TreeTableToggler, TTScrollableView, TTBody, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TTBody, TTCheckbox, TTContextMenuRow, TTEditableColumn, TTHeaderCheckbox, TTReorderableColumn, TTResizableColumn, TTRow, TTScrollableView, TTSelectableRow, TTSelectableRowDblClick, TTSortIcon, TTSortableColumn, TreeTable, TreeTableCellEditor, TreeTableModule, TreeTableService, TreeTableToggler };","map":{"version":3,"names":["i0","Injectable","EventEmitter","Component","ViewEncapsulation","Input","Output","ViewChild","ContentChildren","Directive","HostListener","ChangeDetectionStrategy","NgModule","i3","CommonModule","Subject","DomHandler","i2","PaginatorModule","i1","PrimeTemplate","SharedModule","ObjectUtils","i5","RippleModule","i4","CdkVirtualScrollViewport","ScrollingModule","TreeTableService","constructor","sortSource","selectionSource","contextMenuSource","uiUpdateSource","totalRecordsSource","sortSource$","asObservable","selectionSource$","contextMenuSource$","uiUpdateSource$","totalRecordsSource$","onSort","sortMeta","next","onSelectionChange","onContextMenu","node","onUIUpdate","value","onTotalRecordsChange","ɵfac","ɵprov","type","TreeTable","el","zone","tableService","filterService","lazy","lazyLoadOnInit","first","pageLinks","alwaysShowPaginator","paginatorPosition","currentPageReportTemplate","showFirstLastIcon","showPageLinks","defaultSortOrder","sortMode","resetPageOnSort","selectionChange","contextMenuSelectionChange","contextMenuSelectionMode","compareSelectionBy","loadingIcon","showLoader","virtualScrollDelay","virtualRowHeight","columnResizeMode","rowTrackBy","index","item","filters","filterDelay","filterMode","onFilter","onNodeExpand","onNodeCollapse","onPage","onLazyLoad","sortFunction","onColResize","onColReorder","onNodeSelect","onNodeUnselect","onContextMenuSelect","onHeaderCheckboxToggle","onEditInit","onEditComplete","onEditCancel","_value","_totalRecords","_sortOrder","selectionKeys","ngOnInit","emit","createLazyLoadMetadata","initialized","ngAfterContentInit","templates","forEach","getType","captionTemplate","template","headerTemplate","bodyTemplate","loadingBodyTemplate","footerTemplate","summaryTemplate","colGroupTemplate","emptyMessageTemplate","paginatorLeftTemplate","paginatorRightTemplate","paginatorDropdownItemTemplate","frozenHeaderTemplate","frozenBodyTemplate","frozenFooterTemplate","frozenColGroupTemplate","ngOnChanges","simpleChange","currentValue","totalRecords","length","sortField","sortSingle","multiSortMeta","sortMultiple","hasFilter","_filter","updateSerializedValue","_sortField","sortOrder","_multiSortMeta","selection","_selection","preventSelectionSetterPropagation","updateSelectionKeys","val","serializedValue","paginator","serializePageNodes","serializeNodes","filteredNodes","parent","nodes","level","visible","rowNode","expanded","push","children","data","i","rows","dataKey","Array","isArray","String","resolveFieldData","onPageChange","event","scrollable","resetScrollTop","sort","originalEvent","field","metaKey","ctrlKey","getSortMeta","order","sortNodes","customSort","mode","node1","node2","value1","value2","result","localeCompare","undefined","numeric","sortMultipleNodes","multisortmeta","multisortField","isSorted","sorted","globalFilter","virtualScroll","scrollToVirtualIndex","scrollTo","top","scrollableViewChild","scrollableFrozenViewChild","options","isEmpty","getBlockableElement","nativeElement","onColumnResizeBegin","containerLeft","getOffset","containerViewChild","left","lastResizerHelperX","pageX","scrollLeft","preventDefault","onColumnResize","addClass","resizeHelperViewChild","style","height","offsetHeight","display","onColumnResizeEnd","column","delta","offsetLeft","columnWidth","offsetWidth","newColumnWidth","minWidth","parseInt","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","scrollableView","findParentScrollableView","scrollableBodyTable","findSingle","scrollableHeaderTable","scrollableFooterTable","resizeColumnIndex","resizeColGroup","width","scrollableBody","scrollableHeader","scrollableFooter","scrollableBodyTableWidth","scrollableHeaderTableWidth","isContainerInViewport","setWidth","container","table","calculateScrollbarWidth","tableViewChild","containerWidth","element","removeClass","parentElement","hasClass","colGroup","nodeName","col","nextCol","onColumnDragStart","columnElement","reorderIconWidth","getHiddenElementOuterWidth","reorderIndicatorUpViewChild","reorderIconHeight","getHiddenElementOuterHeight","reorderIndicatorDownViewChild","draggedColumn","dataTransfer","setData","onColumnDragEnter","dropHeader","reorderableColumns","containerOffset","dropHeaderOffset","targetLeft","targetTop","columnCenter","Math","ceil","dropPosition","dropEffect","onColumnDragLeave","onColumnDrop","dropColumn","dragIndex","indexWithinGroup","dropIndex","allowDrop","reorderArray","columns","draggable","handleRowClick","targetNode","target","selectionMode","selected","isSelected","metaSelection","rowTouched","metaKeySelection","dataKeyValue","isSingleSelectionMode","selectionIndex","findIndexInSelection","filter","isMultipleSelectionMode","rowIndex","handleRowTouchEnd","handleRowRightClick","contextMenu","contextMenuSelection","show","toggleNodeWithCheckbox","propagateSelectionDown","propagateSelectionUp","toggleNodesWithCheckbox","check","slice","checked","select","selectedChildCount","childPartialSelected","child","partialSelected","equals","matchMode","filterTimeout","clearTimeout","isFilterBlank","setTimeout","filterGlobal","trim","globalFilterFieldsArray","globalFilterFields","Error","isStrictMode","isValueChanged","copyNode","Object","assign","localMatch","globalMatch","paramsWithoutNode","prop","hasOwnProperty","filterMeta","filterField","filterValue","filterMatchMode","filterConstraint","findFilteredNodes","isFilterMatched","j","copyNodeForGlobal","matches","filteredValue","matched","childNodes","childNode","copyChildNode","dataFieldValue","filterLocale","isNodeLeaf","leaf","empty","reset","updateEditingCell","cell","editingCell","editingCellData","editingCellField","bindDocumentEditListener","isEditingCellValid","find","documentEditListener","editingCellClick","unbindDocumentEditListener","document","addEventListener","removeEventListener","ngOnDestroy","ElementRef","NgZone","FilterService","ɵcmp","Paginator","TTBody","TTScrollableView","NgStyle","NgClass","NgIf","NgTemplateOutlet","args","selector","providers","encapsulation","None","host","styles","styleClass","tableStyle","tableStyleClass","autoLayout","rowsPerPageOptions","paginatorDropdownAppendTo","showCurrentPageReport","showJumpToPageDropdown","rowHover","loading","scrollHeight","minBufferPx","maxBufferPx","frozenWidth","frozenColumns","resizableColumns","tt","treeTableService","cd","subscription","subscribe","detectChanges","unsubscribe","ChangeDetectorRef","NgForOf","CdkVirtualForOf","frozen","_scrollHeight","includes","console","log","virtualScrollBody","ngAfterViewInit","frozenView","previousElementSibling","frozenSiblingBody","scrollBarWidth","scrollHeaderBoxViewChild","paddingRight","scrollFooterBoxViewChild","scrollableAlignerViewChild","calculateScrollbarHeight","bindEvents","runOutsideAngular","scrollHeaderViewChild","headerScrollListener","onHeaderScroll","bind","scrollFooterViewChild","footerScrollListener","onFooterScroll","bodyScrollListener","onBodyScroll","getElementRef","scrollBodyViewChild","unbindEvents","preventBodyScrollPropagation","marginLeft","scrollTop","scrollToIndex","CdkFixedSizeVirtualScroll","scrollTableViewChild","scrollLoadingTableViewChild","TTSortableColumn","isEnabled","updateSortState","onClick","clearSelection","onEnterKey","ttSortableColumnDisabled","ɵdir","TTSortIcon","markForCheck","changeDetection","OnPush","ariaLabelDesc","ariaLabelAsc","TTResizableColumn","resizer","createElement","className","appendChild","resizerMouseDownListener","onMouseDown","bindDocumentEvents","documentMouseMoveListener","onDocumentMouseMove","documentMouseUpListener","onDocumentMouseUp","unbindDocumentEvents","ttResizableColumnDisabled","TTReorderableColumn","mouseDownListener","dragStartListener","onDragStart","dragOverListener","onDragEnter","dragEnterListener","dragLeaveListener","onDragLeave","onDragOver","onDrop","ttReorderableColumnDisabled","TTSelectableRow","which","onTouchEnd","ttSelectableRowDisabled","TTSelectableRowDblClick","TTContextMenuRow","focus","ttContextMenuRowDisabled","TTCheckbox","disabled","onFocus","focused","onBlur","TTHeaderCheckbox","valueChangeSubscription","updateCheckedState","selectionChangeSubscription","boxViewChild","TTEditableColumn","openCell","focusable","closeEditingCell","onKeyDown","keyCode","shiftKey","moveToPreviousCell","moveToNextCell","findCell","currentCell","row","targetCell","findPreviousEditableColumn","invokeElementMethod","findNextEditableColumn","prevCell","previousRow","lastElementChild","nextCell","nextRow","firstElementChild","ttEditableColumnDisabled","TreeTableCellEditor","editableColumn","inputTemplate","outputTemplate","TTRow","prevRow","toggleRowIndex","restoreFocus","TreeTableToggler","Ripple","TreeTableModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["/Users/lnc9/clin/oar-pdr-angular-04/oar-pdr-angular/node_modules/primeng/fesm2015/primeng-treetable.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Component, ViewEncapsulation, Input, Output, ViewChild, ContentChildren, Directive, HostListener, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { DomHandler } from 'primeng/dom';\nimport * as i2 from 'primeng/paginator';\nimport { PaginatorModule } from 'primeng/paginator';\nimport * as i1 from 'primeng/api';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { ObjectUtils } from 'primeng/utils';\nimport * as i5 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\nimport * as i4 from '@angular/cdk/scrolling';\nimport { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\n\nclass TreeTableService {\n    constructor() {\n        this.sortSource = new Subject();\n        this.selectionSource = new Subject();\n        this.contextMenuSource = new Subject();\n        this.uiUpdateSource = new Subject();\n        this.totalRecordsSource = new Subject();\n        this.sortSource$ = this.sortSource.asObservable();\n        this.selectionSource$ = this.selectionSource.asObservable();\n        this.contextMenuSource$ = this.contextMenuSource.asObservable();\n        this.uiUpdateSource$ = this.uiUpdateSource.asObservable();\n        this.totalRecordsSource$ = this.totalRecordsSource.asObservable();\n    }\n    onSort(sortMeta) {\n        this.sortSource.next(sortMeta);\n    }\n    onSelectionChange() {\n        this.selectionSource.next(null);\n    }\n    onContextMenu(node) {\n        this.contextMenuSource.next(node);\n    }\n    onUIUpdate(value) {\n        this.uiUpdateSource.next(value);\n    }\n    onTotalRecordsChange(value) {\n        this.totalRecordsSource.next(value);\n    }\n}\nTreeTableService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TreeTableService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nTreeTableService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TreeTableService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TreeTableService, decorators: [{\n            type: Injectable\n        }] });\nclass TreeTable {\n    constructor(el, zone, tableService, filterService) {\n        this.el = el;\n        this.zone = zone;\n        this.tableService = tableService;\n        this.filterService = filterService;\n        this.lazy = false;\n        this.lazyLoadOnInit = true;\n        this.first = 0;\n        this.pageLinks = 5;\n        this.alwaysShowPaginator = true;\n        this.paginatorPosition = 'bottom';\n        this.currentPageReportTemplate = '{currentPage} of {totalPages}';\n        this.showFirstLastIcon = true;\n        this.showPageLinks = true;\n        this.defaultSortOrder = 1;\n        this.sortMode = 'single';\n        this.resetPageOnSort = true;\n        this.selectionChange = new EventEmitter();\n        this.contextMenuSelectionChange = new EventEmitter();\n        this.contextMenuSelectionMode = \"separate\";\n        this.compareSelectionBy = 'deepEquals';\n        this.loadingIcon = 'pi pi-spinner';\n        this.showLoader = true;\n        this.virtualScrollDelay = 150;\n        this.virtualRowHeight = 28;\n        this.columnResizeMode = 'fit';\n        this.rowTrackBy = (index, item) => item;\n        this.filters = {};\n        this.filterDelay = 300;\n        this.filterMode = 'lenient';\n        this.onFilter = new EventEmitter();\n        this.onNodeExpand = new EventEmitter();\n        this.onNodeCollapse = new EventEmitter();\n        this.onPage = new EventEmitter();\n        this.onSort = new EventEmitter();\n        this.onLazyLoad = new EventEmitter();\n        this.sortFunction = new EventEmitter();\n        this.onColResize = new EventEmitter();\n        this.onColReorder = new EventEmitter();\n        this.onNodeSelect = new EventEmitter();\n        this.onNodeUnselect = new EventEmitter();\n        this.onContextMenuSelect = new EventEmitter();\n        this.onHeaderCheckboxToggle = new EventEmitter();\n        this.onEditInit = new EventEmitter();\n        this.onEditComplete = new EventEmitter();\n        this.onEditCancel = new EventEmitter();\n        this._value = [];\n        this._totalRecords = 0;\n        this._sortOrder = 1;\n        this.selectionKeys = {};\n    }\n    ngOnInit() {\n        if (this.lazy && this.lazyLoadOnInit) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        this.initialized = true;\n    }\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'caption':\n                    this.captionTemplate = item.template;\n                    break;\n                case 'header':\n                    this.headerTemplate = item.template;\n                    break;\n                case 'body':\n                    this.bodyTemplate = item.template;\n                    break;\n                case 'loadingbody':\n                    this.loadingBodyTemplate = item.template;\n                    break;\n                case 'footer':\n                    this.footerTemplate = item.template;\n                    break;\n                case 'summary':\n                    this.summaryTemplate = item.template;\n                    break;\n                case 'colgroup':\n                    this.colGroupTemplate = item.template;\n                    break;\n                case 'emptymessage':\n                    this.emptyMessageTemplate = item.template;\n                    break;\n                case 'paginatorleft':\n                    this.paginatorLeftTemplate = item.template;\n                    break;\n                case 'paginatorright':\n                    this.paginatorRightTemplate = item.template;\n                    break;\n                case 'paginatordropdownitem':\n                    this.paginatorDropdownItemTemplate = item.template;\n                    break;\n                case 'frozenheader':\n                    this.frozenHeaderTemplate = item.template;\n                    break;\n                case 'frozenbody':\n                    this.frozenBodyTemplate = item.template;\n                    break;\n                case 'frozenfooter':\n                    this.frozenFooterTemplate = item.template;\n                    break;\n                case 'frozencolgroup':\n                    this.frozenColGroupTemplate = item.template;\n                    break;\n            }\n        });\n    }\n    ngOnChanges(simpleChange) {\n        if (simpleChange.value) {\n            this._value = simpleChange.value.currentValue;\n            if (!this.lazy) {\n                this.totalRecords = (this._value ? this._value.length : 0);\n                if (this.sortMode == 'single' && this.sortField)\n                    this.sortSingle();\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\n                    this.sortMultiple();\n                else if (this.hasFilter()) //sort already filters\n                    this._filter();\n            }\n            this.updateSerializedValue();\n            this.tableService.onUIUpdate(this.value);\n        }\n        if (simpleChange.sortField) {\n            this._sortField = simpleChange.sortField.currentValue;\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if (!this.lazy || this.initialized) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n        if (simpleChange.sortOrder) {\n            this._sortOrder = simpleChange.sortOrder.currentValue;\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if (!this.lazy || this.initialized) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n        if (simpleChange.multiSortMeta) {\n            this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n            if (this.sortMode === 'multiple') {\n                this.sortMultiple();\n            }\n        }\n        if (simpleChange.selection) {\n            this._selection = simpleChange.selection.currentValue;\n            if (!this.preventSelectionSetterPropagation) {\n                this.updateSelectionKeys();\n                this.tableService.onSelectionChange();\n            }\n            this.preventSelectionSetterPropagation = false;\n        }\n    }\n    get value() {\n        return this._value;\n    }\n    set value(val) {\n        this._value = val;\n    }\n    updateSerializedValue() {\n        this.serializedValue = [];\n        if (this.paginator)\n            this.serializePageNodes();\n        else\n            this.serializeNodes(null, this.filteredNodes || this.value, 0, true);\n    }\n    serializeNodes(parent, nodes, level, visible) {\n        if (nodes && nodes.length) {\n            for (let node of nodes) {\n                node.parent = parent;\n                const rowNode = {\n                    node: node,\n                    parent: parent,\n                    level: level,\n                    visible: visible && (parent ? parent.expanded : true)\n                };\n                this.serializedValue.push(rowNode);\n                if (rowNode.visible && node.expanded) {\n                    this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n                }\n            }\n        }\n    }\n    serializePageNodes() {\n        let data = this.filteredNodes || this.value;\n        this.serializedValue = [];\n        if (data && data.length) {\n            const first = this.lazy ? 0 : this.first;\n            for (let i = first; i < (first + this.rows); i++) {\n                let node = data[i];\n                if (node) {\n                    this.serializedValue.push({\n                        node: node,\n                        parent: null,\n                        level: 0,\n                        visible: true\n                    });\n                    this.serializeNodes(node, node.children, 1, true);\n                }\n            }\n        }\n    }\n    get totalRecords() {\n        return this._totalRecords;\n    }\n    set totalRecords(val) {\n        this._totalRecords = val;\n        this.tableService.onTotalRecordsChange(this._totalRecords);\n    }\n    get sortField() {\n        return this._sortField;\n    }\n    set sortField(val) {\n        this._sortField = val;\n    }\n    get sortOrder() {\n        return this._sortOrder;\n    }\n    set sortOrder(val) {\n        this._sortOrder = val;\n    }\n    get multiSortMeta() {\n        return this._multiSortMeta;\n    }\n    set multiSortMeta(val) {\n        this._multiSortMeta = val;\n    }\n    get selection() {\n        return this._selection;\n    }\n    set selection(val) {\n        this._selection = val;\n    }\n    updateSelectionKeys() {\n        if (this.dataKey && this._selection) {\n            this.selectionKeys = {};\n            if (Array.isArray(this._selection)) {\n                for (let node of this._selection) {\n                    this.selectionKeys[String(ObjectUtils.resolveFieldData(node.data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection.data, this.dataKey))] = 1;\n            }\n        }\n    }\n    onPageChange(event) {\n        this.first = event.first;\n        this.rows = event.rows;\n        if (this.lazy)\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        else\n            this.serializePageNodes();\n        this.onPage.emit({\n            first: this.first,\n            rows: this.rows\n        });\n        this.tableService.onUIUpdate(this.value);\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n    sort(event) {\n        let originalEvent = event.originalEvent;\n        if (this.sortMode === 'single') {\n            this._sortOrder = (this.sortField === event.field) ? this.sortOrder * -1 : this.defaultSortOrder;\n            this._sortField = event.field;\n            this.sortSingle();\n            if (this.resetPageOnSort && this.scrollable) {\n                this.resetScrollTop();\n            }\n        }\n        if (this.sortMode === 'multiple') {\n            let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            let sortMeta = this.getSortMeta(event.field);\n            if (sortMeta) {\n                if (!metaKey) {\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }];\n                    if (this.resetPageOnSort && this.scrollable) {\n                        this.resetScrollTop();\n                    }\n                }\n                else {\n                    sortMeta.order = sortMeta.order * -1;\n                }\n            }\n            else {\n                if (!metaKey || !this.multiSortMeta) {\n                    this._multiSortMeta = [];\n                    if (this.resetPageOnSort && this.scrollable) {\n                        this.resetScrollTop();\n                    }\n                }\n                this.multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\n            }\n            this.sortMultiple();\n        }\n    }\n    sortSingle() {\n        if (this.sortField && this.sortOrder) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                this.sortNodes(this.value);\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n            let sortMeta = {\n                field: this.sortField,\n                order: this.sortOrder\n            };\n            this.onSort.emit(sortMeta);\n            this.tableService.onSort(sortMeta);\n            this.updateSerializedValue();\n        }\n    }\n    sortNodes(nodes) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: nodes,\n                mode: this.sortMode,\n                field: this.sortField,\n                order: this.sortOrder\n            });\n        }\n        else {\n            nodes.sort((node1, node2) => {\n                let value1 = ObjectUtils.resolveFieldData(node1.data, this.sortField);\n                let value2 = ObjectUtils.resolveFieldData(node2.data, this.sortField);\n                let result = null;\n                if (value1 == null && value2 != null)\n                    result = -1;\n                else if (value1 != null && value2 == null)\n                    result = 1;\n                else if (value1 == null && value2 == null)\n                    result = 0;\n                else if (typeof value1 === 'string' && typeof value2 === 'string')\n                    result = value1.localeCompare(value2, undefined, { numeric: true });\n                else\n                    result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n                return (this.sortOrder * result);\n            });\n        }\n        for (let node of nodes) {\n            this.sortNodes(node.children);\n        }\n    }\n    sortMultiple() {\n        if (this.multiSortMeta) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                this.sortMultipleNodes(this.value);\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n            this.onSort.emit({\n                multisortmeta: this.multiSortMeta\n            });\n            this.updateSerializedValue();\n            this.tableService.onSort(this.multiSortMeta);\n        }\n    }\n    sortMultipleNodes(nodes) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: this.value,\n                mode: this.sortMode,\n                multiSortMeta: this.multiSortMeta\n            });\n        }\n        else {\n            nodes.sort((node1, node2) => {\n                return this.multisortField(node1, node2, this.multiSortMeta, 0);\n            });\n        }\n        for (let node of nodes) {\n            this.sortMultipleNodes(node.children);\n        }\n    }\n    multisortField(node1, node2, multiSortMeta, index) {\n        let value1 = ObjectUtils.resolveFieldData(node1.data, multiSortMeta[index].field);\n        let value2 = ObjectUtils.resolveFieldData(node2.data, multiSortMeta[index].field);\n        let result = null;\n        if (value1 == null && value2 != null)\n            result = -1;\n        else if (value1 != null && value2 == null)\n            result = 1;\n        else if (value1 == null && value2 == null)\n            result = 0;\n        if (typeof value1 == 'string' || value1 instanceof String) {\n            if (value1.localeCompare && (value1 != value2)) {\n                return (multiSortMeta[index].order * value1.localeCompare(value2, undefined, { numeric: true }));\n            }\n        }\n        else {\n            result = (value1 < value2) ? -1 : 1;\n        }\n        if (value1 == value2) {\n            return (multiSortMeta.length - 1) > (index) ? (this.multisortField(node1, node2, multiSortMeta, index + 1)) : 0;\n        }\n        return (multiSortMeta[index].order * result);\n    }\n    getSortMeta(field) {\n        if (this.multiSortMeta && this.multiSortMeta.length) {\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\n                if (this.multiSortMeta[i].field === field) {\n                    return this.multiSortMeta[i];\n                }\n            }\n        }\n        return null;\n    }\n    isSorted(field) {\n        if (this.sortMode === 'single') {\n            return (this.sortField && this.sortField === field);\n        }\n        else if (this.sortMode === 'multiple') {\n            let sorted = false;\n            if (this.multiSortMeta) {\n                for (let i = 0; i < this.multiSortMeta.length; i++) {\n                    if (this.multiSortMeta[i].field == field) {\n                        sorted = true;\n                        break;\n                    }\n                }\n            }\n            return sorted;\n        }\n    }\n    createLazyLoadMetadata() {\n        return {\n            first: this.first,\n            rows: this.rows,\n            sortField: this.sortField,\n            sortOrder: this.sortOrder,\n            filters: this.filters,\n            globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n            multiSortMeta: this.multiSortMeta\n        };\n    }\n    resetScrollTop() {\n        if (this.virtualScroll)\n            this.scrollToVirtualIndex(0);\n        else\n            this.scrollTo({ top: 0 });\n    }\n    scrollToVirtualIndex(index) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollToVirtualIndex(index);\n        }\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollToVirtualIndex(index);\n        }\n    }\n    scrollTo(options) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollTo(options);\n        }\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollTo(options);\n        }\n    }\n    isEmpty() {\n        let data = this.filteredNodes || this.value;\n        return data == null || data.length == 0;\n    }\n    getBlockableElement() {\n        return this.el.nativeElement.children[0];\n    }\n    onColumnResizeBegin(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft);\n        event.preventDefault();\n    }\n    onColumnResize(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        DomHandler.addClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n        this.resizeHelperViewChild.nativeElement.style.left = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft) + 'px';\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\n    }\n    onColumnResizeEnd(event, column) {\n        let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n        let columnWidth = column.offsetWidth;\n        let newColumnWidth = columnWidth + delta;\n        let minWidth = column.style.minWidth || 15;\n        if (columnWidth + delta > parseInt(minWidth)) {\n            if (this.columnResizeMode === 'fit') {\n                let nextColumn = column.nextElementSibling;\n                while (!nextColumn.offsetParent) {\n                    nextColumn = nextColumn.nextElementSibling;\n                }\n                if (nextColumn) {\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n                    let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n                        if (this.scrollable) {\n                            let scrollableView = this.findParentScrollableView(column);\n                            let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.p-treetable-virtual-scrollable-body table');\n                            let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n                            let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n                            let resizeColumnIndex = DomHandler.index(column);\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                        }\n                        else {\n                            column.style.width = newColumnWidth + 'px';\n                            if (nextColumn) {\n                                nextColumn.style.width = nextColumnWidth + 'px';\n                            }\n                        }\n                    }\n                }\n            }\n            else if (this.columnResizeMode === 'expand') {\n                if (this.scrollable) {\n                    let scrollableView = this.findParentScrollableView(column);\n                    let scrollableBody = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body') || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport');\n                    let scrollableHeader = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-header');\n                    let scrollableFooter = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-footer');\n                    let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport table');\n                    let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n                    let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n                    scrollableBodyTable.style.width = scrollableBodyTable.offsetWidth + delta + 'px';\n                    scrollableHeaderTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\n                    if (scrollableFooterTable) {\n                        scrollableFooterTable.style.width = scrollableFooterTable.offsetWidth + delta + 'px';\n                    }\n                    let resizeColumnIndex = DomHandler.index(column);\n                    const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n                    const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n                    const isContainerInViewport = this.containerViewChild.nativeElement.offsetWidth >= scrollableBodyTableWidth;\n                    let setWidth = (container, table, width, isContainerInViewport) => {\n                        if (container && table) {\n                            container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto';\n                            table.style.width = width + 'px';\n                        }\n                    };\n                    setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n                    setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n                    setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n                    this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n                }\n                else {\n                    this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n                    column.style.width = newColumnWidth + 'px';\n                    let containerWidth = this.tableViewChild.nativeElement.style.width;\n                    this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n                }\n            }\n            this.onColResize.emit({\n                element: column,\n                delta: delta\n            });\n        }\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\n        DomHandler.removeClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n    }\n    findParentScrollableView(column) {\n        if (column) {\n            let parent = column.parentElement;\n            while (parent && !DomHandler.hasClass(parent, 'p-treetable-scrollable-view')) {\n                parent = parent.parentElement;\n            }\n            return parent;\n        }\n        else {\n            return null;\n        }\n    }\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n        if (table) {\n            let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n            if (colGroup) {\n                let col = colGroup.children[resizeColumnIndex];\n                let nextCol = col.nextElementSibling;\n                col.style.width = newColumnWidth + 'px';\n                if (nextCol && nextColumnWidth) {\n                    nextCol.style.width = nextColumnWidth + 'px';\n                }\n            }\n            else {\n                throw \"Scrollable tables require a colgroup to support resizable columns\";\n            }\n        }\n    }\n    onColumnDragStart(event, columnElement) {\n        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\n        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\n        this.draggedColumn = columnElement;\n        event.dataTransfer.setData('text', 'b'); // For firefox\n    }\n    onColumnDragEnter(event, dropHeader) {\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n            event.preventDefault();\n            let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\n            let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n            if (this.draggedColumn != dropHeader) {\n                let targetLeft = dropHeaderOffset.left - containerOffset.left;\n                let targetTop = containerOffset.top - dropHeaderOffset.top;\n                let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n                if (event.pageX > columnCenter) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = 1;\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = -1;\n                }\n                this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n                this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n            }\n            else {\n                event.dataTransfer.dropEffect = 'none';\n            }\n        }\n    }\n    onColumnDragLeave(event) {\n        if (this.reorderableColumns && this.draggedColumn) {\n            event.preventDefault();\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n        }\n    }\n    onColumnDrop(event, dropColumn) {\n        event.preventDefault();\n        if (this.draggedColumn) {\n            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'ttreorderablecolumn');\n            let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'ttreorderablecolumn');\n            let allowDrop = (dragIndex != dropIndex);\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\n                allowDrop = false;\n            }\n            if (allowDrop && ((dropIndex < dragIndex && this.dropPosition === 1))) {\n                dropIndex = dropIndex + 1;\n            }\n            if (allowDrop && ((dropIndex > dragIndex && this.dropPosition === -1))) {\n                dropIndex = dropIndex - 1;\n            }\n            if (allowDrop) {\n                ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n                this.onColReorder.emit({\n                    dragIndex: dragIndex,\n                    dropIndex: dropIndex,\n                    columns: this.columns\n                });\n            }\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n            this.draggedColumn.draggable = false;\n            this.draggedColumn = null;\n            this.dropPosition = null;\n        }\n    }\n    handleRowClick(event) {\n        let targetNode = event.originalEvent.target.nodeName;\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || (DomHandler.hasClass(event.originalEvent.target, 'p-clickable'))) {\n            return;\n        }\n        if (this.selectionMode) {\n            this.preventSelectionSetterPropagation = true;\n            let rowNode = event.rowNode;\n            let selected = this.isSelected(rowNode.node);\n            let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowNode.node.data, this.dataKey)) : null;\n            if (metaSelection) {\n                let metaKey = event.originalEvent.metaKey || event.originalEvent.ctrlKey;\n                if (selected && metaKey) {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(null);\n                    }\n                    else {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                    this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                }\n                else {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(rowNode.node);\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        if (metaKey) {\n                            this._selection = this.selection || [];\n                        }\n                        else {\n                            this._selection = [];\n                            this.selectionKeys = {};\n                        }\n                        this._selection = [...this.selection, rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                    this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                }\n            }\n            else {\n                if (this.selectionMode === 'single') {\n                    if (selected) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                    }\n                    else {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n                else if (this.selectionMode === 'multiple') {\n                    if (selected) {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                    else {\n                        this._selection = this.selection ? [...this.selection, rowNode.node] : [rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n            }\n            this.tableService.onSelectionChange();\n        }\n        this.rowTouched = false;\n    }\n    handleRowTouchEnd(event) {\n        this.rowTouched = true;\n    }\n    handleRowRightClick(event) {\n        if (this.contextMenu) {\n            const node = event.rowNode.node;\n            if (this.contextMenuSelectionMode === 'separate') {\n                this.contextMenuSelection = node;\n                this.contextMenuSelectionChange.emit(node);\n                this.onContextMenuSelect.emit({ originalEvent: event.originalEvent, node: node });\n                this.contextMenu.show(event.originalEvent);\n                this.tableService.onContextMenu(node);\n            }\n            else if (this.contextMenuSelectionMode === 'joint') {\n                this.preventSelectionSetterPropagation = true;\n                let selected = this.isSelected(node);\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n                if (!selected) {\n                    if (this.isSingleSelectionMode()) {\n                        this.selection = node;\n                        this.selectionChange.emit(node);\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        this.selection = [node];\n                        this.selectionChange.emit(this.selection);\n                    }\n                    if (dataKeyValue) {\n                        this.selectionKeys[dataKeyValue] = 1;\n                    }\n                }\n                this.contextMenu.show(event.originalEvent);\n                this.onContextMenuSelect.emit({ originalEvent: event.originalEvent, node: node });\n            }\n        }\n    }\n    toggleNodeWithCheckbox(event) {\n        this.selection = this.selection || [];\n        this.preventSelectionSetterPropagation = true;\n        let node = event.rowNode.node;\n        let selected = this.isSelected(node);\n        if (selected) {\n            this.propagateSelectionDown(node, false);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, false);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({ originalEvent: event, node: node });\n        }\n        else {\n            this.propagateSelectionDown(node, true);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, true);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({ originalEvent: event, node: node });\n        }\n        this.tableService.onSelectionChange();\n    }\n    toggleNodesWithCheckbox(event, check) {\n        let data = this.filteredNodes || this.value;\n        this._selection = check && data ? data.slice() : [];\n        if (check) {\n            if (data && data.length) {\n                for (let node of data) {\n                    this.propagateSelectionDown(node, true);\n                }\n            }\n        }\n        else {\n            this._selection = [];\n            this.selectionKeys = {};\n        }\n        this.preventSelectionSetterPropagation = true;\n        this.selectionChange.emit(this._selection);\n        this.tableService.onSelectionChange();\n        this.onHeaderCheckboxToggle.emit({ originalEvent: event, checked: check });\n    }\n    propagateSelectionUp(node, select) {\n        if (node.children && node.children.length) {\n            let selectedChildCount = 0;\n            let childPartialSelected = false;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n            for (let child of node.children) {\n                if (this.isSelected(child))\n                    selectedChildCount++;\n                else if (child.partialSelected)\n                    childPartialSelected = true;\n            }\n            if (select && selectedChildCount == node.children.length) {\n                this._selection = [...this.selection || [], node];\n                node.partialSelected = false;\n                if (dataKeyValue) {\n                    this.selectionKeys[dataKeyValue] = 1;\n                }\n            }\n            else {\n                if (!select) {\n                    let index = this.findIndexInSelection(node);\n                    if (index >= 0) {\n                        this._selection = this.selection.filter((val, i) => i != index);\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                }\n                if (childPartialSelected || selectedChildCount > 0 && selectedChildCount != node.children.length)\n                    node.partialSelected = true;\n                else\n                    node.partialSelected = false;\n            }\n        }\n        let parent = node.parent;\n        if (parent) {\n            this.propagateSelectionUp(parent, select);\n        }\n    }\n    propagateSelectionDown(node, select) {\n        let index = this.findIndexInSelection(node);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n        if (select && index == -1) {\n            this._selection = [...this.selection || [], node];\n            if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n            }\n        }\n        else if (!select && index > -1) {\n            this._selection = this.selection.filter((val, i) => i != index);\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n        }\n        node.partialSelected = false;\n        if (node.children && node.children.length) {\n            for (let child of node.children) {\n                this.propagateSelectionDown(child, select);\n            }\n        }\n    }\n    isSelected(node) {\n        if (node && this.selection) {\n            if (this.dataKey) {\n                return this.selectionKeys[ObjectUtils.resolveFieldData(node.data, this.dataKey)] !== undefined;\n            }\n            else {\n                if (this.selection instanceof Array)\n                    return this.findIndexInSelection(node) > -1;\n                else\n                    return this.equals(node, this.selection);\n            }\n        }\n        return false;\n    }\n    findIndexInSelection(node) {\n        let index = -1;\n        if (this.selection && this.selection.length) {\n            for (let i = 0; i < this.selection.length; i++) {\n                if (this.equals(node, this.selection[i])) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n        return index;\n    }\n    isSingleSelectionMode() {\n        return this.selectionMode === 'single';\n    }\n    isMultipleSelectionMode() {\n        return this.selectionMode === 'multiple';\n    }\n    equals(node1, node2) {\n        return this.compareSelectionBy === 'equals' ? (node1 === node2) : ObjectUtils.equals(node1.data, node2.data, this.dataKey);\n    }\n    filter(value, field, matchMode) {\n        if (this.filterTimeout) {\n            clearTimeout(this.filterTimeout);\n        }\n        if (!this.isFilterBlank(value)) {\n            this.filters[field] = { value: value, matchMode: matchMode };\n        }\n        else if (this.filters[field]) {\n            delete this.filters[field];\n        }\n        this.filterTimeout = setTimeout(() => {\n            this._filter();\n            this.filterTimeout = null;\n        }, this.filterDelay);\n    }\n    filterGlobal(value, matchMode) {\n        this.filter(value, 'global', matchMode);\n    }\n    isFilterBlank(filter) {\n        if (filter !== null && filter !== undefined) {\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (filter instanceof Array && filter.length == 0))\n                return true;\n            else\n                return false;\n        }\n        return true;\n    }\n    _filter() {\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            if (!this.value) {\n                return;\n            }\n            if (!this.hasFilter()) {\n                this.filteredNodes = null;\n                if (this.paginator) {\n                    this.totalRecords = this.value ? this.value.length : 0;\n                }\n            }\n            else {\n                let globalFilterFieldsArray;\n                if (this.filters['global']) {\n                    if (!this.columns && !this.globalFilterFields)\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\n                    else\n                        globalFilterFieldsArray = this.globalFilterFields || this.columns;\n                }\n                this.filteredNodes = [];\n                const isStrictMode = this.filterMode === 'strict';\n                let isValueChanged = false;\n                for (let node of this.value) {\n                    let copyNode = Object.assign({}, node);\n                    let localMatch = true;\n                    let globalMatch = false;\n                    let paramsWithoutNode;\n                    for (let prop in this.filters) {\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n                            let filterMeta = this.filters[prop];\n                            let filterField = prop;\n                            let filterValue = filterMeta.value;\n                            let filterMatchMode = filterMeta.matchMode || 'startsWith';\n                            let filterConstraint = this.filterService.filters[filterMatchMode];\n                            paramsWithoutNode = { filterField, filterValue, filterConstraint, isStrictMode };\n                            if ((isStrictMode && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                                (!isStrictMode && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\n                                localMatch = false;\n                            }\n                            if (!localMatch) {\n                                break;\n                            }\n                        }\n                    }\n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n                        for (let j = 0; j < globalFilterFieldsArray.length; j++) {\n                            let copyNodeForGlobal = Object.assign({}, copyNode);\n                            let filterField = globalFilterFieldsArray[j].field || globalFilterFieldsArray[j];\n                            let filterValue = this.filters['global'].value;\n                            let filterConstraint = this.filterService.filters[this.filters['global'].matchMode];\n                            paramsWithoutNode = { filterField, filterValue, filterConstraint, isStrictMode };\n                            if ((isStrictMode && (this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode))) ||\n                                (!isStrictMode && (this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode)))) {\n                                globalMatch = true;\n                                copyNode = copyNodeForGlobal;\n                            }\n                        }\n                    }\n                    let matches = localMatch;\n                    if (this.filters['global']) {\n                        matches = localMatch && globalMatch;\n                    }\n                    if (matches) {\n                        this.filteredNodes.push(copyNode);\n                    }\n                    isValueChanged = isValueChanged || !localMatch || globalMatch || (localMatch && this.filteredNodes.length > 0) || (!globalMatch && this.filteredNodes.length === 0);\n                }\n                if (!isValueChanged) {\n                    this.filteredNodes = null;\n                }\n                if (this.paginator) {\n                    this.totalRecords = this.filteredNodes ? this.filteredNodes.length : this.value ? this.value.length : 0;\n                }\n            }\n        }\n        this.first = 0;\n        const filteredValue = this.filteredNodes || this.value;\n        this.onFilter.emit({\n            filters: this.filters,\n            filteredValue: filteredValue\n        });\n        this.tableService.onUIUpdate(filteredValue);\n        this.updateSerializedValue();\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n    findFilteredNodes(node, paramsWithoutNode) {\n        if (node) {\n            let matched = false;\n            if (node.children) {\n                let childNodes = [...node.children];\n                node.children = [];\n                for (let childNode of childNodes) {\n                    let copyChildNode = Object.assign({}, childNode);\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                        matched = true;\n                        node.children.push(copyChildNode);\n                    }\n                }\n            }\n            if (matched) {\n                return true;\n            }\n        }\n    }\n    isFilterMatched(node, { filterField, filterValue, filterConstraint, isStrictMode }) {\n        let matched = false;\n        let dataFieldValue = ObjectUtils.resolveFieldData(node.data, filterField);\n        if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n            matched = true;\n        }\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\n            matched = this.findFilteredNodes(node, { filterField, filterValue, filterConstraint, isStrictMode }) || matched;\n        }\n        return matched;\n    }\n    isNodeLeaf(node) {\n        return node.leaf === false ? false : !(node.children && node.children.length);\n    }\n    hasFilter() {\n        let empty = true;\n        for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop)) {\n                empty = false;\n                break;\n            }\n        }\n        return !empty;\n    }\n    reset() {\n        this._sortField = null;\n        this._sortOrder = 1;\n        this._multiSortMeta = null;\n        this.tableService.onSort(null);\n        this.filteredNodes = null;\n        this.filters = {};\n        this.first = 0;\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            this.totalRecords = (this._value ? this._value.length : 0);\n        }\n    }\n    updateEditingCell(cell, data, field) {\n        this.editingCell = cell;\n        this.editingCellData = data;\n        this.editingCellField = field;\n        this.bindDocumentEditListener();\n    }\n    isEditingCellValid() {\n        return (this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0);\n    }\n    bindDocumentEditListener() {\n        if (!this.documentEditListener) {\n            this.documentEditListener = (event) => {\n                if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n                    DomHandler.removeClass(this.editingCell, 'p-cell-editing');\n                    this.editingCell = null;\n                    this.onEditComplete.emit({ field: this.editingCellField, data: this.editingCellData });\n                    this.editingCellField = null;\n                    this.editingCellData = null;\n                    this.unbindDocumentEditListener();\n                }\n                this.editingCellClick = false;\n            };\n            document.addEventListener('click', this.documentEditListener);\n        }\n    }\n    unbindDocumentEditListener() {\n        if (this.documentEditListener) {\n            document.removeEventListener('click', this.documentEditListener);\n            this.documentEditListener = null;\n        }\n    }\n    ngOnDestroy() {\n        this.unbindDocumentEditListener();\n        this.editingCell = null;\n        this.editingCellField = null;\n        this.editingCellData = null;\n        this.initialized = null;\n    }\n}\nTreeTable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TreeTable, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: TreeTableService }, { token: i1.FilterService }], target: i0.ɵɵFactoryTarget.Component });\nTreeTable.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.7\", type: TreeTable, selector: \"p-treeTable\", inputs: { columns: \"columns\", style: \"style\", styleClass: \"styleClass\", tableStyle: \"tableStyle\", tableStyleClass: \"tableStyleClass\", autoLayout: \"autoLayout\", lazy: \"lazy\", lazyLoadOnInit: \"lazyLoadOnInit\", paginator: \"paginator\", rows: \"rows\", first: \"first\", pageLinks: \"pageLinks\", rowsPerPageOptions: \"rowsPerPageOptions\", alwaysShowPaginator: \"alwaysShowPaginator\", paginatorPosition: \"paginatorPosition\", paginatorDropdownAppendTo: \"paginatorDropdownAppendTo\", currentPageReportTemplate: \"currentPageReportTemplate\", showCurrentPageReport: \"showCurrentPageReport\", showJumpToPageDropdown: \"showJumpToPageDropdown\", showFirstLastIcon: \"showFirstLastIcon\", showPageLinks: \"showPageLinks\", defaultSortOrder: \"defaultSortOrder\", sortMode: \"sortMode\", resetPageOnSort: \"resetPageOnSort\", customSort: \"customSort\", selectionMode: \"selectionMode\", contextMenuSelection: \"contextMenuSelection\", contextMenuSelectionMode: \"contextMenuSelectionMode\", dataKey: \"dataKey\", metaKeySelection: \"metaKeySelection\", compareSelectionBy: \"compareSelectionBy\", rowHover: \"rowHover\", loading: \"loading\", loadingIcon: \"loadingIcon\", showLoader: \"showLoader\", scrollable: \"scrollable\", scrollHeight: \"scrollHeight\", virtualScroll: \"virtualScroll\", virtualScrollDelay: \"virtualScrollDelay\", virtualRowHeight: \"virtualRowHeight\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\", frozenWidth: \"frozenWidth\", frozenColumns: \"frozenColumns\", resizableColumns: \"resizableColumns\", columnResizeMode: \"columnResizeMode\", reorderableColumns: \"reorderableColumns\", contextMenu: \"contextMenu\", rowTrackBy: \"rowTrackBy\", filters: \"filters\", globalFilterFields: \"globalFilterFields\", filterDelay: \"filterDelay\", filterMode: \"filterMode\", filterLocale: \"filterLocale\", value: \"value\", totalRecords: \"totalRecords\", sortField: \"sortField\", sortOrder: \"sortOrder\", multiSortMeta: \"multiSortMeta\", selection: \"selection\" }, outputs: { selectionChange: \"selectionChange\", contextMenuSelectionChange: \"contextMenuSelectionChange\", onFilter: \"onFilter\", onNodeExpand: \"onNodeExpand\", onNodeCollapse: \"onNodeCollapse\", onPage: \"onPage\", onSort: \"onSort\", onLazyLoad: \"onLazyLoad\", sortFunction: \"sortFunction\", onColResize: \"onColResize\", onColReorder: \"onColReorder\", onNodeSelect: \"onNodeSelect\", onNodeUnselect: \"onNodeUnselect\", onContextMenuSelect: \"onContextMenuSelect\", onHeaderCheckboxToggle: \"onHeaderCheckboxToggle\", onEditInit: \"onEditInit\", onEditComplete: \"onEditComplete\", onEditCancel: \"onEditCancel\" }, host: { classAttribute: \"p-element\" }, providers: [TreeTableService], queries: [{ propertyName: \"templates\", predicate: PrimeTemplate }], viewQueries: [{ propertyName: \"containerViewChild\", first: true, predicate: [\"container\"], descendants: true }, { propertyName: \"resizeHelperViewChild\", first: true, predicate: [\"resizeHelper\"], descendants: true }, { propertyName: \"reorderIndicatorUpViewChild\", first: true, predicate: [\"reorderIndicatorUp\"], descendants: true }, { propertyName: \"reorderIndicatorDownViewChild\", first: true, predicate: [\"reorderIndicatorDown\"], descendants: true }, { propertyName: \"tableViewChild\", first: true, predicate: [\"table\"], descendants: true }, { propertyName: \"scrollableViewChild\", first: true, predicate: [\"scrollableView\"], descendants: true }, { propertyName: \"scrollableFrozenViewChild\", first: true, predicate: [\"scrollableFrozenView\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\" data-scrollselectors=\".p-treetable-scrollable-body\"\n                [ngClass]=\"{'p-treetable p-component': true,\n                'p-treetable-hoverable-rows': (rowHover||(selectionMode === 'single' || selectionMode === 'multiple')),\n                'p-treetable-auto-layout': autoLayout,\n                'p-treetable-resizable': resizableColumns,\n                'p-treetable-resizable-fit': (resizableColumns && columnResizeMode === 'fit'),\n                'p-treetable-flex-scrollable': (scrollable && scrollHeight === 'flex')}\">\n            <div class=\"p-treetable-loading\" *ngIf=\"loading && showLoader\">\n                <div class=\"p-treetable-loading-overlay p-component-overlay\">\n                    <i [class]=\"'p-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\n                </div>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"p-treetable-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\n\n            <div class=\"p-treetable-wrapper\" *ngIf=\"!scrollable\">\n                <table #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"p-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\n               <div class=\"p-treetable-scrollable-view p-treetable-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" #scrollableFrozenView [ttScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\n               <div class=\"p-treetable-scrollable-view\" #scrollableView [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{left: frozenWidth, width: 'calc(100% - '+frozenWidth+')'}\"></div>\n            </div>\n\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\n            <div *ngIf=\"summaryTemplate\" class=\"p-treetable-footer\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"p-column-resizer-helper\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down p-treetable-reorder-indicator-up\" *ngIf=\"reorderableColumns\"></span>\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up p-treetable-reorder-indicator-down\" *ngIf=\"reorderableColumns\"></span>\n        </div>\n    `, isInline: true, styles: [\".p-treetable{position:relative}.p-treetable table{border-collapse:collapse;width:100%;table-layout:fixed}.p-treetable .p-sortable-column{cursor:pointer;-webkit-user-select:none;user-select:none}.p-treetable .p-sortable-column .p-column-title,.p-treetable .p-sortable-column .p-sortable-column-icon,.p-treetable .p-sortable-column .p-sortable-column-badge{vertical-align:middle}.p-treetable .p-sortable-column .p-sortable-column-badge{display:inline-flex;align-items:center;justify-content:center}.p-treetable-auto-layout>.p-treetable-wrapper{overflow-x:auto}.p-treetable-auto-layout>.p-treetable-wrapper>table{table-layout:auto}.p-treetable-hoverable-rows .p-treetable-tbody>tr{cursor:pointer}.p-treetable-toggler{cursor:pointer;-webkit-user-select:none;user-select:none;display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;overflow:hidden;position:relative}p-treetabletoggler+p-treetablecheckbox .p-checkbox{vertical-align:middle}p-treetabletoggler+p-treetablecheckbox+span{vertical-align:middle}.p-treetable-scrollable-wrapper{position:relative}.p-treetable-scrollable-header,.p-treetable-scrollable-footer{overflow:hidden}.p-treetable-scrollable-body{overflow:auto;position:relative}.p-treetable-scrollable-body>table>.p-treetable-tbody>tr:first-child>td{border-top:0 none}.p-treetable-virtual-table{position:absolute}.p-treetable-frozen-view .p-treetable-scrollable-body{overflow:hidden}.p-treetable-frozen-view>.p-treetable-scrollable-body>table>.p-treetable-tbody>tr>td:last-child{border-right:0 none}.p-treetable-unfrozen-view{position:absolute;top:0}.p-treetable-flex-scrollable,.p-treetable-flex-scrollable .p-treetable-scrollable-wrapper,.p-treetable-flex-scrollable .p-treetable-scrollable-view{display:flex;flex-direction:column;flex:1;height:100%}.p-treetable-flex-scrollable .p-treetable-virtual-scrollable-body{flex:1}.p-treetable-resizable>.p-treetable-wrapper{overflow-x:auto}.p-treetable-resizable .p-treetable-thead>tr>th,.p-treetable-resizable .p-treetable-tfoot>tr>td,.p-treetable-resizable .p-treetable-tbody>tr>td{overflow:hidden}.p-treetable-resizable .p-resizable-column{background-clip:padding-box;position:relative}.p-treetable-resizable-fit .p-resizable-column:last-child .p-column-resizer{display:none}.p-treetable .p-column-resizer{display:block;position:absolute!important;top:0;right:0;margin:0;width:.5rem;height:100%;padding:0;cursor:col-resize;border:1px solid transparent}.p-treetable .p-column-resizer-helper{width:1px;position:absolute;z-index:10;display:none}.p-treetable .p-row-editor-init,.p-treetable .p-row-editor-save,.p-treetable .p-row-editor-cancel,.p-treetable .p-row-toggler{display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative}.p-treetable-reorder-indicator-up,.p-treetable-reorder-indicator-down{position:absolute;display:none}[ttReorderableColumn]{cursor:move}.p-treetable .p-treetable-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}\\n\"], components: [{ type: i0.forwardRef(function () { return i2.Paginator; }), selector: \"p-paginator\", inputs: [\"pageLinkSize\", \"style\", \"styleClass\", \"alwaysShow\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"dropdownScrollHeight\", \"currentPageReportTemplate\", \"showCurrentPageReport\", \"showFirstLastIcon\", \"totalRecords\", \"rows\", \"rowsPerPageOptions\", \"showJumpToPageDropdown\", \"showJumpToPageInput\", \"showPageLinks\", \"dropdownItemTemplate\", \"first\"], outputs: [\"onPageChange\"] }, { type: i0.forwardRef(function () { return TTBody; }), selector: \"[pTreeTableBody]\", inputs: [\"pTreeTableBody\", \"pTreeTableBodyTemplate\", \"frozen\"] }, { type: i0.forwardRef(function () { return TTScrollableView; }), selector: \"[ttScrollableView]\", inputs: [\"ttScrollableView\", \"frozen\", \"scrollHeight\"] }], directives: [{ type: i0.forwardRef(function () { return i3.NgStyle; }), selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i0.forwardRef(function () { return i3.NgClass; }), selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i0.forwardRef(function () { return i3.NgIf; }), selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i0.forwardRef(function () { return i3.NgTemplateOutlet; }), selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TreeTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'p-treeTable', template: `\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\" data-scrollselectors=\".p-treetable-scrollable-body\"\n                [ngClass]=\"{'p-treetable p-component': true,\n                'p-treetable-hoverable-rows': (rowHover||(selectionMode === 'single' || selectionMode === 'multiple')),\n                'p-treetable-auto-layout': autoLayout,\n                'p-treetable-resizable': resizableColumns,\n                'p-treetable-resizable-fit': (resizableColumns && columnResizeMode === 'fit'),\n                'p-treetable-flex-scrollable': (scrollable && scrollHeight === 'flex')}\">\n            <div class=\"p-treetable-loading\" *ngIf=\"loading && showLoader\">\n                <div class=\"p-treetable-loading-overlay p-component-overlay\">\n                    <i [class]=\"'p-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\n                </div>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"p-treetable-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\n\n            <div class=\"p-treetable-wrapper\" *ngIf=\"!scrollable\">\n                <table #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"p-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\n               <div class=\"p-treetable-scrollable-view p-treetable-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" #scrollableFrozenView [ttScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\n               <div class=\"p-treetable-scrollable-view\" #scrollableView [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{left: frozenWidth, width: 'calc(100% - '+frozenWidth+')'}\"></div>\n            </div>\n\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\n            <div *ngIf=\"summaryTemplate\" class=\"p-treetable-footer\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"p-column-resizer-helper\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down p-treetable-reorder-indicator-up\" *ngIf=\"reorderableColumns\"></span>\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up p-treetable-reorder-indicator-down\" *ngIf=\"reorderableColumns\"></span>\n        </div>\n    `, providers: [TreeTableService], encapsulation: ViewEncapsulation.None, host: {\n                        'class': 'p-element'\n                    }, styles: [\".p-treetable{position:relative}.p-treetable table{border-collapse:collapse;width:100%;table-layout:fixed}.p-treetable .p-sortable-column{cursor:pointer;-webkit-user-select:none;user-select:none}.p-treetable .p-sortable-column .p-column-title,.p-treetable .p-sortable-column .p-sortable-column-icon,.p-treetable .p-sortable-column .p-sortable-column-badge{vertical-align:middle}.p-treetable .p-sortable-column .p-sortable-column-badge{display:inline-flex;align-items:center;justify-content:center}.p-treetable-auto-layout>.p-treetable-wrapper{overflow-x:auto}.p-treetable-auto-layout>.p-treetable-wrapper>table{table-layout:auto}.p-treetable-hoverable-rows .p-treetable-tbody>tr{cursor:pointer}.p-treetable-toggler{cursor:pointer;-webkit-user-select:none;user-select:none;display:inline-flex;align-items:center;justify-content:center;vertical-align:middle;overflow:hidden;position:relative}p-treetabletoggler+p-treetablecheckbox .p-checkbox{vertical-align:middle}p-treetabletoggler+p-treetablecheckbox+span{vertical-align:middle}.p-treetable-scrollable-wrapper{position:relative}.p-treetable-scrollable-header,.p-treetable-scrollable-footer{overflow:hidden}.p-treetable-scrollable-body{overflow:auto;position:relative}.p-treetable-scrollable-body>table>.p-treetable-tbody>tr:first-child>td{border-top:0 none}.p-treetable-virtual-table{position:absolute}.p-treetable-frozen-view .p-treetable-scrollable-body{overflow:hidden}.p-treetable-frozen-view>.p-treetable-scrollable-body>table>.p-treetable-tbody>tr>td:last-child{border-right:0 none}.p-treetable-unfrozen-view{position:absolute;top:0}.p-treetable-flex-scrollable,.p-treetable-flex-scrollable .p-treetable-scrollable-wrapper,.p-treetable-flex-scrollable .p-treetable-scrollable-view{display:flex;flex-direction:column;flex:1;height:100%}.p-treetable-flex-scrollable .p-treetable-virtual-scrollable-body{flex:1}.p-treetable-resizable>.p-treetable-wrapper{overflow-x:auto}.p-treetable-resizable .p-treetable-thead>tr>th,.p-treetable-resizable .p-treetable-tfoot>tr>td,.p-treetable-resizable .p-treetable-tbody>tr>td{overflow:hidden}.p-treetable-resizable .p-resizable-column{background-clip:padding-box;position:relative}.p-treetable-resizable-fit .p-resizable-column:last-child .p-column-resizer{display:none}.p-treetable .p-column-resizer{display:block;position:absolute!important;top:0;right:0;margin:0;width:.5rem;height:100%;padding:0;cursor:col-resize;border:1px solid transparent}.p-treetable .p-column-resizer-helper{width:1px;position:absolute;z-index:10;display:none}.p-treetable .p-row-editor-init,.p-treetable .p-row-editor-save,.p-treetable .p-row-editor-cancel,.p-treetable .p-row-toggler{display:inline-flex;align-items:center;justify-content:center;overflow:hidden;position:relative}.p-treetable-reorder-indicator-up,.p-treetable-reorder-indicator-down{position:absolute;display:none}[ttReorderableColumn]{cursor:move}.p-treetable .p-treetable-loading-overlay{position:absolute;display:flex;align-items:center;justify-content:center;z-index:2}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: TreeTableService }, { type: i1.FilterService }]; }, propDecorators: { columns: [{\n                type: Input\n            }], style: [{\n                type: Input\n            }], styleClass: [{\n                type: Input\n            }], tableStyle: [{\n                type: Input\n            }], tableStyleClass: [{\n                type: Input\n            }], autoLayout: [{\n                type: Input\n            }], lazy: [{\n                type: Input\n            }], lazyLoadOnInit: [{\n                type: Input\n            }], paginator: [{\n                type: Input\n            }], rows: [{\n                type: Input\n            }], first: [{\n                type: Input\n            }], pageLinks: [{\n                type: Input\n            }], rowsPerPageOptions: [{\n                type: Input\n            }], alwaysShowPaginator: [{\n                type: Input\n            }], paginatorPosition: [{\n                type: Input\n            }], paginatorDropdownAppendTo: [{\n                type: Input\n            }], currentPageReportTemplate: [{\n                type: Input\n            }], showCurrentPageReport: [{\n                type: Input\n            }], showJumpToPageDropdown: [{\n                type: Input\n            }], showFirstLastIcon: [{\n                type: Input\n            }], showPageLinks: [{\n                type: Input\n            }], defaultSortOrder: [{\n                type: Input\n            }], sortMode: [{\n                type: Input\n            }], resetPageOnSort: [{\n                type: Input\n            }], customSort: [{\n                type: Input\n            }], selectionMode: [{\n                type: Input\n            }], selectionChange: [{\n                type: Output\n            }], contextMenuSelection: [{\n                type: Input\n            }], contextMenuSelectionChange: [{\n                type: Output\n            }], contextMenuSelectionMode: [{\n                type: Input\n            }], dataKey: [{\n                type: Input\n            }], metaKeySelection: [{\n                type: Input\n            }], compareSelectionBy: [{\n                type: Input\n            }], rowHover: [{\n                type: Input\n            }], loading: [{\n                type: Input\n            }], loadingIcon: [{\n                type: Input\n            }], showLoader: [{\n                type: Input\n            }], scrollable: [{\n                type: Input\n            }], scrollHeight: [{\n                type: Input\n            }], virtualScroll: [{\n                type: Input\n            }], virtualScrollDelay: [{\n                type: Input\n            }], virtualRowHeight: [{\n                type: Input\n            }], minBufferPx: [{\n                type: Input\n            }], maxBufferPx: [{\n                type: Input\n            }], frozenWidth: [{\n                type: Input\n            }], frozenColumns: [{\n                type: Input\n            }], resizableColumns: [{\n                type: Input\n            }], columnResizeMode: [{\n                type: Input\n            }], reorderableColumns: [{\n                type: Input\n            }], contextMenu: [{\n                type: Input\n            }], rowTrackBy: [{\n                type: Input\n            }], filters: [{\n                type: Input\n            }], globalFilterFields: [{\n                type: Input\n            }], filterDelay: [{\n                type: Input\n            }], filterMode: [{\n                type: Input\n            }], filterLocale: [{\n                type: Input\n            }], onFilter: [{\n                type: Output\n            }], onNodeExpand: [{\n                type: Output\n            }], onNodeCollapse: [{\n                type: Output\n            }], onPage: [{\n                type: Output\n            }], onSort: [{\n                type: Output\n            }], onLazyLoad: [{\n                type: Output\n            }], sortFunction: [{\n                type: Output\n            }], onColResize: [{\n                type: Output\n            }], onColReorder: [{\n                type: Output\n            }], onNodeSelect: [{\n                type: Output\n            }], onNodeUnselect: [{\n                type: Output\n            }], onContextMenuSelect: [{\n                type: Output\n            }], onHeaderCheckboxToggle: [{\n                type: Output\n            }], onEditInit: [{\n                type: Output\n            }], onEditComplete: [{\n                type: Output\n            }], onEditCancel: [{\n                type: Output\n            }], containerViewChild: [{\n                type: ViewChild,\n                args: ['container']\n            }], resizeHelperViewChild: [{\n                type: ViewChild,\n                args: ['resizeHelper']\n            }], reorderIndicatorUpViewChild: [{\n                type: ViewChild,\n                args: ['reorderIndicatorUp']\n            }], reorderIndicatorDownViewChild: [{\n                type: ViewChild,\n                args: ['reorderIndicatorDown']\n            }], tableViewChild: [{\n                type: ViewChild,\n                args: ['table']\n            }], scrollableViewChild: [{\n                type: ViewChild,\n                args: ['scrollableView']\n            }], scrollableFrozenViewChild: [{\n                type: ViewChild,\n                args: ['scrollableFrozenView']\n            }], templates: [{\n                type: ContentChildren,\n                args: [PrimeTemplate]\n            }], value: [{\n                type: Input\n            }], totalRecords: [{\n                type: Input\n            }], sortField: [{\n                type: Input\n            }], sortOrder: [{\n                type: Input\n            }], multiSortMeta: [{\n                type: Input\n            }], selection: [{\n                type: Input\n            }] } });\nclass TTBody {\n    constructor(tt, treeTableService, cd) {\n        this.tt = tt;\n        this.treeTableService = treeTableService;\n        this.cd = cd;\n        this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            if (this.tt.virtualScroll) {\n                this.cd.detectChanges();\n            }\n        });\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\nTTBody.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTBody, deps: [{ token: TreeTable }, { token: TreeTableService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nTTBody.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.7\", type: TTBody, selector: \"[pTreeTableBody]\", inputs: { columns: [\"pTreeTableBody\", \"columns\"], template: [\"pTreeTableBodyTemplate\", \"template\"], frozen: \"frozen\" }, host: { classAttribute: \"p-element\" }, ngImport: i0, template: `\n        <ng-container *ngIf=\"!tt.virtualScroll\">\n            <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\n                <ng-container *ngIf=\"serializedNode.visible\">\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"tt.virtualScroll\">\n            <ng-template cdkVirtualFor let-serializedNode let-rowIndex=\"index\" [cdkVirtualForOf]=\"tt.serializedValue\" [cdkVirtualForTrackBy]=\"tt.rowTrackBy\" [cdkVirtualForTemplateCacheSize]=\"0\">\n                <ng-container *ngIf=\"serializedNode.visible\">\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"tt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: {$implicit: columns, frozen: frozen}\"></ng-container>\n        </ng-container>\n    `, isInline: true, directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }, { type: i4.CdkVirtualForOf, selector: \"[cdkVirtualFor][cdkVirtualForOf]\", inputs: [\"cdkVirtualForOf\", \"cdkVirtualForTrackBy\", \"cdkVirtualForTemplate\", \"cdkVirtualForTemplateCacheSize\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTBody, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[pTreeTableBody]',\n                    template: `\n        <ng-container *ngIf=\"!tt.virtualScroll\">\n            <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\n                <ng-container *ngIf=\"serializedNode.visible\">\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"tt.virtualScroll\">\n            <ng-template cdkVirtualFor let-serializedNode let-rowIndex=\"index\" [cdkVirtualForOf]=\"tt.serializedValue\" [cdkVirtualForTrackBy]=\"tt.rowTrackBy\" [cdkVirtualForTemplateCacheSize]=\"0\">\n                <ng-container *ngIf=\"serializedNode.visible\">\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"tt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: {$implicit: columns, frozen: frozen}\"></ng-container>\n        </ng-container>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    host: {\n                        'class': 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { columns: [{\n                type: Input,\n                args: [\"pTreeTableBody\"]\n            }], template: [{\n                type: Input,\n                args: [\"pTreeTableBodyTemplate\"]\n            }], frozen: [{\n                type: Input\n            }] } });\nclass TTScrollableView {\n    constructor(tt, el, zone) {\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    get scrollHeight() {\n        return this._scrollHeight;\n    }\n    set scrollHeight(val) {\n        this._scrollHeight = val;\n        if (val != null && (val.includes('%') || val.includes('calc'))) {\n            console.log('Percentage scroll height calculation is removed in favor of the more performant CSS based flex mode, use scrollHeight=\"flex\" instead.');\n        }\n        if (this.tt.virtualScroll && this.virtualScrollBody) {\n            this.virtualScrollBody.ngOnInit();\n        }\n    }\n    ngAfterViewInit() {\n        if (!this.frozen) {\n            if (this.tt.frozenColumns || this.tt.frozenBodyTemplate) {\n                DomHandler.addClass(this.el.nativeElement, 'p-treetable-unfrozen-view');\n            }\n            let frozenView = this.el.nativeElement.previousElementSibling;\n            if (frozenView) {\n                if (this.tt.virtualScroll)\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-virtual-scrollable-body');\n                else\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-scrollable-body');\n            }\n            let scrollBarWidth = DomHandler.calculateScrollbarWidth();\n            this.scrollHeaderBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n            if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n                this.scrollFooterBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n            }\n        }\n        else {\n            if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\n                this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\n            }\n        }\n        this.bindEvents();\n    }\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n                this.headerScrollListener = this.onHeaderScroll.bind(this);\n                this.scrollHeaderBoxViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\n            }\n            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n                this.footerScrollListener = this.onFooterScroll.bind(this);\n                this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\n            }\n            if (!this.frozen) {\n                this.bodyScrollListener = this.onBodyScroll.bind(this);\n                if (this.tt.virtualScroll)\n                    this.virtualScrollBody.getElementRef().nativeElement.addEventListener('scroll', this.bodyScrollListener);\n                else\n                    this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n            }\n        });\n    }\n    unbindEvents() {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\n        }\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\n        }\n        if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n            this.scrollBodyViewChild.nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n        if (this.virtualScrollBody && this.virtualScrollBody.getElementRef()) {\n            this.virtualScrollBody.getElementRef().nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n    }\n    onHeaderScroll() {\n        const scrollLeft = this.scrollHeaderViewChild.nativeElement.scrollLeft;\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n        this.preventBodyScrollPropagation = true;\n    }\n    onFooterScroll() {\n        const scrollLeft = this.scrollFooterViewChild.nativeElement.scrollLeft;\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n        this.preventBodyScrollPropagation = true;\n    }\n    onBodyScroll(event) {\n        if (this.preventBodyScrollPropagation) {\n            this.preventBodyScrollPropagation = false;\n            return;\n        }\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n        if (this.frozenSiblingBody) {\n            this.frozenSiblingBody.scrollTop = event.target.scrollTop;\n        }\n    }\n    scrollToVirtualIndex(index) {\n        if (this.virtualScrollBody) {\n            this.virtualScrollBody.scrollToIndex(index);\n        }\n    }\n    scrollTo(options) {\n        if (this.virtualScrollBody) {\n            this.virtualScrollBody.scrollTo(options);\n        }\n        else {\n            if (this.scrollBodyViewChild.nativeElement.scrollTo) {\n                this.scrollBodyViewChild.nativeElement.scrollTo(options);\n            }\n            else {\n                this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;\n                this.scrollBodyViewChild.nativeElement.scrollTop = options.top;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this.unbindEvents();\n        this.frozenSiblingBody = null;\n    }\n}\nTTScrollableView.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTScrollableView, deps: [{ token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nTTScrollableView.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.7\", type: TTScrollableView, selector: \"[ttScrollableView]\", inputs: { columns: [\"ttScrollableView\", \"columns\"], frozen: \"frozen\", scrollHeight: \"scrollHeight\" }, host: { classAttribute: \"p-element\" }, viewQueries: [{ propertyName: \"scrollHeaderViewChild\", first: true, predicate: [\"scrollHeader\"], descendants: true }, { propertyName: \"scrollHeaderBoxViewChild\", first: true, predicate: [\"scrollHeaderBox\"], descendants: true }, { propertyName: \"scrollBodyViewChild\", first: true, predicate: [\"scrollBody\"], descendants: true }, { propertyName: \"scrollTableViewChild\", first: true, predicate: [\"scrollTable\"], descendants: true }, { propertyName: \"scrollLoadingTableViewChild\", first: true, predicate: [\"loadingTable\"], descendants: true }, { propertyName: \"scrollFooterViewChild\", first: true, predicate: [\"scrollFooter\"], descendants: true }, { propertyName: \"scrollFooterBoxViewChild\", first: true, predicate: [\"scrollFooterBox\"], descendants: true }, { propertyName: \"scrollableAlignerViewChild\", first: true, predicate: [\"scrollableAligner\"], descendants: true }, { propertyName: \"virtualScrollBody\", first: true, predicate: CdkVirtualScrollViewport, descendants: true }], ngImport: i0, template: `\n        <div #scrollHeader class=\"p-treetable-scrollable-header\">\n            <div #scrollHeaderBox class=\"p-treetable-scrollable-header-box\">\n                <table class=\"p-treetable-scrollable-header-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate||tt.headerTemplate : tt.headerTemplate; context {$implicit: columns}\"></ng-container>\n                    </thead>\n                </table>\n            </div>\n        </div>\n        <ng-container *ngIf=\"!tt.virtualScroll; else virtualScrollTemplate\">\n            <div #scrollBody class=\"p-treetable-scrollable-body\" [ngStyle]=\"{'max-height': tt.scrollHeight !== 'flex' ? scrollHeight : undefined, 'overflow-y': !frozen && tt.scrollHeight ? 'scroll' : undefined}\">\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </div>\n        </ng-container>\n        <ng-template #virtualScrollTemplate>\n            <cdk-virtual-scroll-viewport [itemSize]=\"tt.virtualRowHeight\" [style.height]=\"tt.scrollHeight !== 'flex' ? scrollHeight : undefined\"\n                    [minBufferPx]=\"tt.minBufferPx\" [maxBufferPx]=\"tt.maxBufferPx\" class=\"p-treetable-virtual-scrollable-body\">\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </cdk-virtual-scroll-viewport>\n        </ng-template>\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"p-treetable-scrollable-footer\">\n            <div #scrollFooterBox class=\"p-treetable-scrollable-footer-box\">\n                <table class=\"p-treetable-scrollable-footer-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate||tt.footerTemplate : tt.footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `, isInline: true, components: [{ type: TTBody, selector: \"[pTreeTableBody]\", inputs: [\"pTreeTableBody\", \"pTreeTableBodyTemplate\", \"frozen\"] }, { type: i4.CdkVirtualScrollViewport, selector: \"cdk-virtual-scroll-viewport\", inputs: [\"orientation\", \"appendOnly\"], outputs: [\"scrolledIndexChange\"] }], directives: [{ type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i3.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }, { type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.CdkFixedSizeVirtualScroll, selector: \"cdk-virtual-scroll-viewport[itemSize]\", inputs: [\"itemSize\", \"minBufferPx\", \"maxBufferPx\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTScrollableView, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ttScrollableView]',\n                    template: `\n        <div #scrollHeader class=\"p-treetable-scrollable-header\">\n            <div #scrollHeaderBox class=\"p-treetable-scrollable-header-box\">\n                <table class=\"p-treetable-scrollable-header-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate||tt.headerTemplate : tt.headerTemplate; context {$implicit: columns}\"></ng-container>\n                    </thead>\n                </table>\n            </div>\n        </div>\n        <ng-container *ngIf=\"!tt.virtualScroll; else virtualScrollTemplate\">\n            <div #scrollBody class=\"p-treetable-scrollable-body\" [ngStyle]=\"{'max-height': tt.scrollHeight !== 'flex' ? scrollHeight : undefined, 'overflow-y': !frozen && tt.scrollHeight ? 'scroll' : undefined}\">\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </div>\n        </ng-container>\n        <ng-template #virtualScrollTemplate>\n            <cdk-virtual-scroll-viewport [itemSize]=\"tt.virtualRowHeight\" [style.height]=\"tt.scrollHeight !== 'flex' ? scrollHeight : undefined\"\n                    [minBufferPx]=\"tt.minBufferPx\" [maxBufferPx]=\"tt.maxBufferPx\" class=\"p-treetable-virtual-scrollable-body\">\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </cdk-virtual-scroll-viewport>\n        </ng-template>\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"p-treetable-scrollable-footer\">\n            <div #scrollFooterBox class=\"p-treetable-scrollable-footer-box\">\n                <table class=\"p-treetable-scrollable-footer-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate||tt.footerTemplate : tt.footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    host: {\n                        'class': 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { columns: [{\n                type: Input,\n                args: [\"ttScrollableView\"]\n            }], frozen: [{\n                type: Input\n            }], scrollHeaderViewChild: [{\n                type: ViewChild,\n                args: ['scrollHeader']\n            }], scrollHeaderBoxViewChild: [{\n                type: ViewChild,\n                args: ['scrollHeaderBox']\n            }], scrollBodyViewChild: [{\n                type: ViewChild,\n                args: ['scrollBody']\n            }], scrollTableViewChild: [{\n                type: ViewChild,\n                args: ['scrollTable']\n            }], scrollLoadingTableViewChild: [{\n                type: ViewChild,\n                args: ['loadingTable']\n            }], scrollFooterViewChild: [{\n                type: ViewChild,\n                args: ['scrollFooter']\n            }], scrollFooterBoxViewChild: [{\n                type: ViewChild,\n                args: ['scrollFooterBox']\n            }], scrollableAlignerViewChild: [{\n                type: ViewChild,\n                args: ['scrollableAligner']\n            }], virtualScrollBody: [{\n                type: ViewChild,\n                args: [CdkVirtualScrollViewport]\n            }], scrollHeight: [{\n                type: Input\n            }] } });\nclass TTSortableColumn {\n    constructor(tt) {\n        this.tt = tt;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n                this.updateSortState();\n            });\n        }\n    }\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.updateSortState();\n        }\n    }\n    updateSortState() {\n        this.sorted = this.tt.isSorted(this.field);\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.updateSortState();\n            this.tt.sort({\n                originalEvent: event,\n                field: this.field\n            });\n            DomHandler.clearSelection();\n        }\n    }\n    onEnterKey(event) {\n        this.onClick(event);\n    }\n    isEnabled() {\n        return this.ttSortableColumnDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\nTTSortableColumn.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTSortableColumn, deps: [{ token: TreeTable }], target: i0.ɵɵFactoryTarget.Directive });\nTTSortableColumn.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.7\", type: TTSortableColumn, selector: \"[ttSortableColumn]\", inputs: { field: [\"ttSortableColumn\", \"field\"], ttSortableColumnDisabled: \"ttSortableColumnDisabled\" }, host: { listeners: { \"click\": \"onClick($event)\", \"keydown.enter\": \"onEnterKey($event)\" }, properties: { \"class.p-sortable-column\": \"isEnabled()\", \"class.p-highlight\": \"sorted\", \"attr.tabindex\": \"isEnabled() ? \\\"0\\\" : null\", \"attr.role\": \"\\\"columnheader\\\"\" }, classAttribute: \"p-element\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTSortableColumn, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttSortableColumn]',\n                    host: {\n                        'class': 'p-element',\n                        '[class.p-sortable-column]': 'isEnabled()',\n                        '[class.p-highlight]': 'sorted',\n                        '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n                        '[attr.role]': '\"columnheader\"'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }]; }, propDecorators: { field: [{\n                type: Input,\n                args: [\"ttSortableColumn\"]\n            }], ttSortableColumnDisabled: [{\n                type: Input\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onEnterKey: [{\n                type: HostListener,\n                args: ['keydown.enter', ['$event']]\n            }] } });\nclass TTSortIcon {\n    constructor(tt, cd) {\n        this.tt = tt;\n        this.cd = cd;\n        this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n            this.updateSortState();\n            this.cd.markForCheck();\n        });\n    }\n    ngOnInit() {\n        this.updateSortState();\n    }\n    onClick(event) {\n        event.preventDefault();\n    }\n    updateSortState() {\n        if (this.tt.sortMode === 'single') {\n            this.sortOrder = this.tt.isSorted(this.field) ? this.tt.sortOrder : 0;\n        }\n        else if (this.tt.sortMode === 'multiple') {\n            let sortMeta = this.tt.getSortMeta(this.field);\n            this.sortOrder = sortMeta ? sortMeta.order : 0;\n        }\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\nTTSortIcon.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTSortIcon, deps: [{ token: TreeTable }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nTTSortIcon.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.7\", type: TTSortIcon, selector: \"p-treeTableSortIcon\", inputs: { field: \"field\", ariaLabelDesc: \"ariaLabelDesc\", ariaLabelAsc: \"ariaLabelAsc\" }, host: { classAttribute: \"p-element\" }, ngImport: i0, template: `\n        <i class=\"p-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-amount-up-alt': sortOrder === 1, 'pi-sort-amount-down': sortOrder === -1, 'pi-sort-alt': sortOrder === 0}\"></i>\n    `, isInline: true, directives: [{ type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTSortIcon, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableSortIcon',\n                    template: `\n        <i class=\"p-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-amount-up-alt': sortOrder === 1, 'pi-sort-amount-down': sortOrder === -1, 'pi-sort-alt': sortOrder === 0}\"></i>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: {\n                        'class': 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { field: [{\n                type: Input\n            }], ariaLabelDesc: [{\n                type: Input\n            }], ariaLabelAsc: [{\n                type: Input\n            }] } });\nclass TTResizableColumn {\n    constructor(tt, el, zone) {\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'p-resizable-column');\n            this.resizer = document.createElement('span');\n            this.resizer.className = 'p-column-resizer';\n            this.el.nativeElement.appendChild(this.resizer);\n            this.zone.runOutsideAngular(() => {\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\n            });\n        }\n    }\n    bindDocumentEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\n            this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\n            document.addEventListener('mouseup', this.documentMouseUpListener);\n        });\n    }\n    unbindDocumentEvents() {\n        if (this.documentMouseMoveListener) {\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\n            this.documentMouseMoveListener = null;\n        }\n        if (this.documentMouseUpListener) {\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\n            this.documentMouseUpListener = null;\n        }\n    }\n    onMouseDown(event) {\n        this.tt.onColumnResizeBegin(event);\n        this.bindDocumentEvents();\n    }\n    onDocumentMouseMove(event) {\n        this.tt.onColumnResize(event);\n    }\n    onDocumentMouseUp(event) {\n        this.tt.onColumnResizeEnd(event, this.el.nativeElement);\n        this.unbindDocumentEvents();\n    }\n    isEnabled() {\n        return this.ttResizableColumnDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.resizerMouseDownListener) {\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n        }\n        this.unbindDocumentEvents();\n    }\n}\nTTResizableColumn.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTResizableColumn, deps: [{ token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nTTResizableColumn.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.7\", type: TTResizableColumn, selector: \"[ttResizableColumn]\", inputs: { ttResizableColumnDisabled: \"ttResizableColumnDisabled\" }, host: { classAttribute: \"p-element\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTResizableColumn, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttResizableColumn]',\n                    host: {\n                        'class': 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { ttResizableColumnDisabled: [{\n                type: Input\n            }] } });\nclass TTReorderableColumn {\n    constructor(tt, el, zone) {\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.bindEvents();\n        }\n    }\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n            this.dragStartListener = this.onDragStart.bind(this);\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n            this.dragOverListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n            this.dragEnterListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\n            this.dragLeaveListener = this.onDragLeave.bind(this);\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n        });\n    }\n    unbindEvents() {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    }\n    onMouseDown(event) {\n        if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'p-column-resizer'))\n            this.el.nativeElement.draggable = false;\n        else\n            this.el.nativeElement.draggable = true;\n    }\n    onDragStart(event) {\n        this.tt.onColumnDragStart(event, this.el.nativeElement);\n    }\n    onDragOver(event) {\n        event.preventDefault();\n    }\n    onDragEnter(event) {\n        this.tt.onColumnDragEnter(event, this.el.nativeElement);\n    }\n    onDragLeave(event) {\n        this.tt.onColumnDragLeave(event);\n    }\n    onDrop(event) {\n        if (this.isEnabled()) {\n            this.tt.onColumnDrop(event, this.el.nativeElement);\n        }\n    }\n    isEnabled() {\n        return this.ttReorderableColumnDisabled !== true;\n    }\n    ngOnDestroy() {\n        this.unbindEvents();\n    }\n}\nTTReorderableColumn.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTReorderableColumn, deps: [{ token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nTTReorderableColumn.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.7\", type: TTReorderableColumn, selector: \"[ttReorderableColumn]\", inputs: { ttReorderableColumnDisabled: \"ttReorderableColumnDisabled\" }, host: { listeners: { \"drop\": \"onDrop($event)\" }, classAttribute: \"p-element\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTReorderableColumn, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttReorderableColumn]',\n                    host: {\n                        'class': 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { ttReorderableColumnDisabled: [{\n                type: Input\n            }], onDrop: [{\n                type: HostListener,\n                args: ['drop', ['$event']]\n            }] } });\nclass TTSelectableRow {\n    constructor(tt, tableService) {\n        this.tt = tt;\n        this.tableService = tableService;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n    onEnterKey(event) {\n        if (event.which === 13) {\n            this.onClick(event);\n        }\n    }\n    onTouchEnd(event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowTouchEnd(event);\n        }\n    }\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\nTTSelectableRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTSelectableRow, deps: [{ token: TreeTable }, { token: TreeTableService }], target: i0.ɵɵFactoryTarget.Directive });\nTTSelectableRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.7\", type: TTSelectableRow, selector: \"[ttSelectableRow]\", inputs: { rowNode: [\"ttSelectableRow\", \"rowNode\"], ttSelectableRowDisabled: \"ttSelectableRowDisabled\" }, host: { listeners: { \"click\": \"onClick($event)\", \"keydown\": \"onEnterKey($event)\", \"touchend\": \"onTouchEnd($event)\" }, properties: { \"class.p-highlight\": \"selected\" }, classAttribute: \"p-element\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTSelectableRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttSelectableRow]',\n                    host: {\n                        'class': 'p-element',\n                        '[class.p-highlight]': 'selected'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }]; }, propDecorators: { rowNode: [{\n                type: Input,\n                args: [\"ttSelectableRow\"]\n            }], ttSelectableRowDisabled: [{\n                type: Input\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onEnterKey: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }], onTouchEnd: [{\n                type: HostListener,\n                args: ['touchend', ['$event']]\n            }] } });\nclass TTSelectableRowDblClick {\n    constructor(tt, tableService) {\n        this.tt = tt;\n        this.tableService = tableService;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\nTTSelectableRowDblClick.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTSelectableRowDblClick, deps: [{ token: TreeTable }, { token: TreeTableService }], target: i0.ɵɵFactoryTarget.Directive });\nTTSelectableRowDblClick.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.7\", type: TTSelectableRowDblClick, selector: \"[ttSelectableRowDblClick]\", inputs: { rowNode: [\"ttSelectableRowDblClick\", \"rowNode\"], ttSelectableRowDisabled: \"ttSelectableRowDisabled\" }, host: { listeners: { \"dblclick\": \"onClick($event)\" }, properties: { \"class.p-highlight\": \"selected\" }, classAttribute: \"p-element\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTSelectableRowDblClick, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttSelectableRowDblClick]',\n                    host: {\n                        'class': 'p-element',\n                        '[class.p-highlight]': 'selected'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }]; }, propDecorators: { rowNode: [{\n                type: Input,\n                args: [\"ttSelectableRowDblClick\"]\n            }], ttSelectableRowDisabled: [{\n                type: Input\n            }], onClick: [{\n                type: HostListener,\n                args: ['dblclick', ['$event']]\n            }] } });\nclass TTContextMenuRow {\n    constructor(tt, tableService, el) {\n        this.tt = tt;\n        this.tableService = tableService;\n        this.el = el;\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.contextMenuSource$.subscribe((node) => {\n                this.selected = this.tt.equals(this.rowNode.node, node);\n            });\n        }\n    }\n    onContextMenu(event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowRightClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n            this.el.nativeElement.focus();\n            event.preventDefault();\n        }\n    }\n    isEnabled() {\n        return this.ttContextMenuRowDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\nTTContextMenuRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTContextMenuRow, deps: [{ token: TreeTable }, { token: TreeTableService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nTTContextMenuRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.7\", type: TTContextMenuRow, selector: \"[ttContextMenuRow]\", inputs: { rowNode: [\"ttContextMenuRow\", \"rowNode\"], ttContextMenuRowDisabled: \"ttContextMenuRowDisabled\" }, host: { listeners: { \"contextmenu\": \"onContextMenu($event)\" }, properties: { \"class.p-highlight-contextmenu\": \"selected\", \"attr.tabindex\": \"isEnabled() ? 0 : undefined\" }, classAttribute: \"p-element\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTContextMenuRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttContextMenuRow]',\n                    host: {\n                        'class': 'p-element',\n                        '[class.p-highlight-contextmenu]': 'selected',\n                        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }, { type: i0.ElementRef }]; }, propDecorators: { rowNode: [{\n                type: Input,\n                args: [\"ttContextMenuRow\"]\n            }], ttContextMenuRowDisabled: [{\n                type: Input\n            }], onContextMenu: [{\n                type: HostListener,\n                args: ['contextmenu', ['$event']]\n            }] } });\nclass TTCheckbox {\n    constructor(tt, tableService, cd) {\n        this.tt = tt;\n        this.tableService = tableService;\n        this.cd = cd;\n        this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.tt.isSelected(this.rowNode.node);\n            this.cd.markForCheck();\n        });\n    }\n    ngOnInit() {\n        this.checked = this.tt.isSelected(this.rowNode.node);\n    }\n    onClick(event) {\n        if (!this.disabled) {\n            this.tt.toggleNodeWithCheckbox({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n        DomHandler.clearSelection();\n    }\n    onFocus() {\n        this.focused = true;\n    }\n    onBlur() {\n        this.focused = false;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\nTTCheckbox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTCheckbox, deps: [{ token: TreeTable }, { token: TreeTableService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nTTCheckbox.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.7\", type: TTCheckbox, selector: \"p-treeTableCheckbox\", inputs: { disabled: \"disabled\", rowNode: [\"value\", \"rowNode\"] }, host: { classAttribute: \"p-element\" }, ngImport: i0, template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{'p-checkbox-focused':focused}\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n            </div>\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\n                'p-highlight':checked, 'p-focus':focused, 'p-indeterminate': rowNode.node.partialSelected, 'p-disabled':disabled}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon pi\" [ngClass]=\"{'pi-check':checked, 'pi-minus': rowNode.node.partialSelected}\"></span>\n            </div>\n        </div>\n    `, isInline: true, directives: [{ type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTCheckbox, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableCheckbox',\n                    template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{'p-checkbox-focused':focused}\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n            </div>\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\n                'p-highlight':checked, 'p-focus':focused, 'p-indeterminate': rowNode.node.partialSelected, 'p-disabled':disabled}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon pi\" [ngClass]=\"{'pi-check':checked, 'pi-minus': rowNode.node.partialSelected}\"></span>\n            </div>\n        </div>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: {\n                        'class': 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { disabled: [{\n                type: Input\n            }], rowNode: [{\n                type: Input,\n                args: [\"value\"]\n            }] } });\nclass TTHeaderCheckbox {\n    constructor(tt, tableService, cd) {\n        this.tt = tt;\n        this.tableService = tableService;\n        this.cd = cd;\n        this.valueChangeSubscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n        this.selectionChangeSubscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n    }\n    ngOnInit() {\n        this.checked = this.updateCheckedState();\n    }\n    onClick(event, checked) {\n        if (this.tt.value && this.tt.value.length > 0) {\n            this.tt.toggleNodesWithCheckbox(event, !checked);\n        }\n        DomHandler.clearSelection();\n    }\n    onFocus() {\n        this.focused = true;\n    }\n    onBlur() {\n        this.focused = false;\n    }\n    ngOnDestroy() {\n        if (this.selectionChangeSubscription) {\n            this.selectionChangeSubscription.unsubscribe();\n        }\n        if (this.valueChangeSubscription) {\n            this.valueChangeSubscription.unsubscribe();\n        }\n    }\n    updateCheckedState() {\n        this.cd.markForCheck();\n        let checked;\n        const data = this.tt.filteredNodes || this.tt.value;\n        if (data) {\n            for (let node of data) {\n                if (this.tt.isSelected(node)) {\n                    checked = true;\n                }\n                else {\n                    checked = false;\n                    break;\n                }\n            }\n        }\n        else {\n            checked = false;\n        }\n        return checked;\n    }\n}\nTTHeaderCheckbox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTHeaderCheckbox, deps: [{ token: TreeTable }, { token: TreeTableService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nTTHeaderCheckbox.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.7\", type: TTHeaderCheckbox, selector: \"p-treeTableHeaderCheckbox\", host: { classAttribute: \"p-element\" }, viewQueries: [{ propertyName: \"boxViewChild\", first: true, predicate: [\"box\"], descendants: true }], ngImport: i0, template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{'p-checkbox-focused':focused}\" (click)=\"onClick($event, cb.checked)\">\n            <div class=\"p-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value||tt.value.length === 0\">\n            </div>\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\n                'p-highlight':checked, 'p-focus':focused, 'p-disabled': (!tt.value || tt.value.length === 0)}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `, isInline: true, directives: [{ type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTHeaderCheckbox, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableHeaderCheckbox',\n                    template: `\n        <div class=\"p-checkbox p-component\" [ngClass]=\"{'p-checkbox-focused':focused}\" (click)=\"onClick($event, cb.checked)\">\n            <div class=\"p-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value||tt.value.length === 0\">\n            </div>\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\n                'p-highlight':checked, 'p-focus':focused, 'p-disabled': (!tt.value || tt.value.length === 0)}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: {\n                        'class': 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TreeTableService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { boxViewChild: [{\n                type: ViewChild,\n                args: ['box']\n            }] } });\nclass TTEditableColumn {\n    constructor(tt, el, zone) {\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'p-editable-column');\n        }\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.tt.editingCellClick = true;\n            if (this.tt.editingCell) {\n                if (this.tt.editingCell !== this.el.nativeElement) {\n                    if (!this.tt.isEditingCellValid()) {\n                        return;\n                    }\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.openCell();\n                }\n            }\n            else {\n                this.openCell();\n            }\n        }\n    }\n    openCell() {\n        this.tt.updateEditingCell(this.el.nativeElement, this.data, this.field);\n        DomHandler.addClass(this.el.nativeElement, 'p-cell-editing');\n        this.tt.onEditInit.emit({ field: this.field, data: this.data });\n        this.tt.editingCellClick = true;\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let focusable = DomHandler.findSingle(this.el.nativeElement, 'input, textarea');\n                if (focusable) {\n                    focusable.focus();\n                }\n            }, 50);\n        });\n    }\n    closeEditingCell() {\n        DomHandler.removeClass(this.tt.editingCell, 'p-checkbox-icon');\n        this.tt.editingCell = null;\n        this.tt.unbindDocumentEditListener();\n    }\n    onKeyDown(event) {\n        if (this.isEnabled()) {\n            //enter\n            if (event.keyCode == 13) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.closeEditingCell();\n                    this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n                }\n                event.preventDefault();\n            }\n            //escape\n            else if (event.keyCode == 27) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.closeEditingCell();\n                    this.tt.onEditCancel.emit({ field: this.field, data: this.data });\n                }\n                event.preventDefault();\n            }\n            //tab\n            else if (event.keyCode == 9) {\n                this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n                if (event.shiftKey)\n                    this.moveToPreviousCell(event);\n                else\n                    this.moveToNextCell(event);\n            }\n        }\n    }\n    findCell(element) {\n        if (element) {\n            let cell = element;\n            while (cell && !DomHandler.hasClass(cell, 'p-cell-editing')) {\n                cell = cell.parentElement;\n            }\n            return cell;\n        }\n        else {\n            return null;\n        }\n    }\n    moveToPreviousCell(event) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findPreviousEditableColumn(currentCell);\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n    moveToNextCell(event) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findNextEditableColumn(currentCell);\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n    findPreviousEditableColumn(cell) {\n        let prevCell = cell.previousElementSibling;\n        if (!prevCell) {\n            let previousRow = cell.parentElement ? cell.parentElement.previousElementSibling : null;\n            if (previousRow) {\n                prevCell = previousRow.lastElementChild;\n            }\n        }\n        if (prevCell) {\n            if (DomHandler.hasClass(prevCell, 'p-editable-column'))\n                return prevCell;\n            else\n                return this.findPreviousEditableColumn(prevCell);\n        }\n        else {\n            return null;\n        }\n    }\n    findNextEditableColumn(cell) {\n        let nextCell = cell.nextElementSibling;\n        if (!nextCell) {\n            let nextRow = cell.parentElement ? cell.parentElement.nextElementSibling : null;\n            if (nextRow) {\n                nextCell = nextRow.firstElementChild;\n            }\n        }\n        if (nextCell) {\n            if (DomHandler.hasClass(nextCell, 'p-editable-column'))\n                return nextCell;\n            else\n                return this.findNextEditableColumn(nextCell);\n        }\n        else {\n            return null;\n        }\n    }\n    isEnabled() {\n        return this.ttEditableColumnDisabled !== true;\n    }\n}\nTTEditableColumn.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTEditableColumn, deps: [{ token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nTTEditableColumn.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.7\", type: TTEditableColumn, selector: \"[ttEditableColumn]\", inputs: { data: [\"ttEditableColumn\", \"data\"], field: [\"ttEditableColumnField\", \"field\"], ttEditableColumnDisabled: \"ttEditableColumnDisabled\" }, host: { listeners: { \"click\": \"onClick($event)\", \"keydown\": \"onKeyDown($event)\" }, classAttribute: \"p-element\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTEditableColumn, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttEditableColumn]',\n                    host: {\n                        'class': 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { data: [{\n                type: Input,\n                args: [\"ttEditableColumn\"]\n            }], field: [{\n                type: Input,\n                args: [\"ttEditableColumnField\"]\n            }], ttEditableColumnDisabled: [{\n                type: Input\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\nclass TreeTableCellEditor {\n    constructor(tt, editableColumn) {\n        this.tt = tt;\n        this.editableColumn = editableColumn;\n    }\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'input':\n                    this.inputTemplate = item.template;\n                    break;\n                case 'output':\n                    this.outputTemplate = item.template;\n                    break;\n            }\n        });\n    }\n}\nTreeTableCellEditor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TreeTableCellEditor, deps: [{ token: TreeTable }, { token: TTEditableColumn }], target: i0.ɵɵFactoryTarget.Component });\nTreeTableCellEditor.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.7\", type: TreeTableCellEditor, selector: \"p-treeTableCellEditor\", host: { classAttribute: \"p-element\" }, queries: [{ propertyName: \"templates\", predicate: PrimeTemplate }], ngImport: i0, template: `\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `, isInline: true, directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TreeTableCellEditor, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableCellEditor',\n                    template: `\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    host: {\n                        'class': 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: TTEditableColumn }]; }, propDecorators: { templates: [{\n                type: ContentChildren,\n                args: [PrimeTemplate]\n            }] } });\nclass TTRow {\n    constructor(tt, el, zone) {\n        this.tt = tt;\n        this.el = el;\n        this.zone = zone;\n    }\n    onKeyDown(event) {\n        switch (event.which) {\n            //down arrow\n            case 40:\n                let nextRow = this.el.nativeElement.nextElementSibling;\n                if (nextRow) {\n                    nextRow.focus();\n                }\n                event.preventDefault();\n                break;\n            //down arrow\n            case 38:\n                let prevRow = this.el.nativeElement.previousElementSibling;\n                if (prevRow) {\n                    prevRow.focus();\n                }\n                event.preventDefault();\n                break;\n            //left arrow\n            case 37:\n                if (this.rowNode.node.expanded) {\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n                    this.rowNode.node.expanded = false;\n                    this.tt.onNodeCollapse.emit({\n                        originalEvent: event,\n                        node: this.rowNode.node\n                    });\n                    this.tt.updateSerializedValue();\n                    this.tt.tableService.onUIUpdate(this.tt.value);\n                    this.restoreFocus();\n                }\n                break;\n            //right arrow\n            case 39:\n                if (!this.rowNode.node.expanded) {\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n                    this.rowNode.node.expanded = true;\n                    this.tt.onNodeExpand.emit({\n                        originalEvent: event,\n                        node: this.rowNode.node\n                    });\n                    this.tt.updateSerializedValue();\n                    this.tt.tableService.onUIUpdate(this.tt.value);\n                    this.restoreFocus();\n                }\n                break;\n        }\n    }\n    restoreFocus() {\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let row = DomHandler.findSingle(this.tt.containerViewChild.nativeElement, '.p-treetable-tbody').children[this.tt.toggleRowIndex];\n                if (row) {\n                    row.focus();\n                }\n            }, 25);\n        });\n    }\n}\nTTRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTRow, deps: [{ token: TreeTable }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nTTRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.7\", type: TTRow, selector: \"[ttRow]\", inputs: { rowNode: [\"ttRow\", \"rowNode\"] }, host: { listeners: { \"keydown\": \"onKeyDown($event)\" }, properties: { \"attr.tabindex\": \"\\\"0\\\"\" }, classAttribute: \"p-element\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TTRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ttRow]',\n                    host: {\n                        'class': 'p-element',\n                        '[attr.tabindex]': '\"0\"'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { rowNode: [{\n                type: Input,\n                args: ['ttRow']\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\nclass TreeTableToggler {\n    constructor(tt) {\n        this.tt = tt;\n    }\n    onClick(event) {\n        this.rowNode.node.expanded = !this.rowNode.node.expanded;\n        if (this.rowNode.node.expanded) {\n            this.tt.onNodeExpand.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n        else {\n            this.tt.onNodeCollapse.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n        this.tt.updateSerializedValue();\n        this.tt.tableService.onUIUpdate(this.tt.value);\n        event.preventDefault();\n    }\n}\nTreeTableToggler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TreeTableToggler, deps: [{ token: TreeTable }], target: i0.ɵɵFactoryTarget.Component });\nTreeTableToggler.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.7\", type: TreeTableToggler, selector: \"p-treeTableToggler\", inputs: { rowNode: \"rowNode\" }, host: { classAttribute: \"p-element\" }, ngImport: i0, template: `\n        <button type=\"button\" class=\"p-treetable-toggler p-link\" (click)=\"onClick($event)\" tabindex=\"-1\" pRipple\n            [style.visibility]=\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\" [style.marginLeft]=\"rowNode.level * 16 + 'px'\">\n            <i [ngClass]=\"rowNode.node.expanded ? 'pi pi-fw pi-chevron-down' : 'pi pi-fw pi-chevron-right'\"></i>\n        </button>\n    `, isInline: true, directives: [{ type: i5.Ripple, selector: \"[pRipple]\" }, { type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TreeTableToggler, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-treeTableToggler',\n                    template: `\n        <button type=\"button\" class=\"p-treetable-toggler p-link\" (click)=\"onClick($event)\" tabindex=\"-1\" pRipple\n            [style.visibility]=\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\" [style.marginLeft]=\"rowNode.level * 16 + 'px'\">\n            <i [ngClass]=\"rowNode.node.expanded ? 'pi pi-fw pi-chevron-down' : 'pi pi-fw pi-chevron-right'\"></i>\n        </button>\n    `,\n                    encapsulation: ViewEncapsulation.None,\n                    host: {\n                        'class': 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: TreeTable }]; }, propDecorators: { rowNode: [{\n                type: Input\n            }] } });\nclass TreeTableModule {\n}\nTreeTableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TreeTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTreeTableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TreeTableModule, declarations: [TreeTable, TreeTableToggler, TTScrollableView, TTBody, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor], imports: [CommonModule, PaginatorModule, ScrollingModule, RippleModule], exports: [TreeTable, SharedModule, TreeTableToggler, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor, ScrollingModule] });\nTreeTableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TreeTableModule, imports: [[CommonModule, PaginatorModule, ScrollingModule, RippleModule], SharedModule, ScrollingModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.7\", ngImport: i0, type: TreeTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, PaginatorModule, ScrollingModule, RippleModule],\n                    exports: [TreeTable, SharedModule, TreeTableToggler, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor, ScrollingModule],\n                    declarations: [TreeTable, TreeTableToggler, TTScrollableView, TTBody, TTSortableColumn, TTSortIcon, TTResizableColumn, TTRow, TTReorderableColumn, TTSelectableRow, TTSelectableRowDblClick, TTContextMenuRow, TTCheckbox, TTHeaderCheckbox, TTEditableColumn, TreeTableCellEditor]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TTBody, TTCheckbox, TTContextMenuRow, TTEditableColumn, TTHeaderCheckbox, TTReorderableColumn, TTResizableColumn, TTRow, TTScrollableView, TTSelectableRow, TTSelectableRowDblClick, TTSortIcon, TTSortableColumn, TreeTable, TreeTableCellEditor, TreeTableModule, TreeTableService, TreeTableToggler };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}